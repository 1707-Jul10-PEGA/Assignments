/*CREATE COMPANY DATABASE USING DDL*/
DROP USER OfficeSupply CASCADE;

CREATE USER OfficeSupply
    IDENTIFIED BY OfficeSupplyPassword;
    
SELECT USERNAME FROM DBA_USERS WHERE USERNAME = 'OFFICESUPPLY';

/*2.0 CREATING TABLES AND RELATIONSHIP*/
/*2.1 CREATE TABLES FOR OFFICESUPPLY*/
CREATE TABLE EMPLOYEES
(
    EMPLOYEEID NUMBER NOT NULL,
    USERNAME VARCHAR(20) NOT NULL,
    PASSWORD VARCHAR(20) NOT NULL,
    NAME VARCHAR(25) NOT NULL,
    DEPARTMENT CHAR(2) NOT NULL,
    MANAGER NUMBER NOT NULL,
    CONSTRAINT PK_EMPLOYEEID PRIMARY KEY (EMPLOYEEID)
);

CREATE TABLE ORDERS
(
    ORDERID NUMBER NOT NULL,
    EMPLOYEEID NUMBER NOT NULL,
    ORDERDATE DATE NOT NULL,
    STATUS CHAR NOT NULL,
    CONSTRAINT PK_ORDERID PRIMARY KEY (ORDERID)
);

CREATE TABLE ORDERITEM
(
    ORDERID NUMBER NOT NULL,
    PRODUCTID VARCHAR(80) NOT NULL,
    QUANTITY NUMBER NOT NULL,
    CONSTRAINT ORDERID_PK PRIMARY KEY (ORDERID),
    CONSTRAINT FK_ORDERID FOREIGN KEY (ORDERID) REFERENCES ORDERS(ORDERID)
);

CREATE TABLE CATEGORY
(
    CATID NUMBER NOT NULL,
    NAME VARCHAR(80) NULL,
    DESCRIPT VARCHAR(80) NULL,
    CONSTRAINT PK_CATID PRIMARY KEY (CATID)
);

CREATE TABLE SUPPLIER
(
    SUPPID NUMBER NOT NULL,
    NAME VARCHAR(80) NULL,
    CONSTRAINT PK_SUPPID PRIMARY KEY (SUPPID)
);

CREATE TABLE PRODUCT
(
    PRODUCTID VARCHAR(80) NOT NULL,
    CATID NUMBER NOT NULL,
    NAME VARCHAR(80) NULL,
    DESCRIPT VARCHAR(255) NULL,
    UNITCOST NUMBER NULL,
    SUPPID NUMBER NOT NULL,
    CONSTRAINT PK_PRODUCTID PRIMARY KEY (PRODUCTID),
    CONSTRAINT FK_CATID FOREIGN KEY (CATID) REFERENCES CATEGORY(CATID),
    CONSTRAINT FK_SUPPID FOREIGN KEY (CATID) REFERENCES SUPPLIER(SUPPID)
);

/*2.2 CREATE RELATIONSHIP*/
ALTER TABLE ORDERS ADD CONSTRAINT FK_EMPLOYEEID FOREIGN KEY (EMPLOYEEID) REFERENCES EMPLOYEES(EMPLOYEEID);
ALTER TABLE ORDERITEM ADD CONSTRAINT FK_PRODUCTID FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID);

/*3.0 PERFORMING SQL QUERIES*/
INSERT INTO EMPLOYEES (EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
    VALUES (1, 'dclark', 'dc', 'clark', 'HR', 0);
INSERT INTO EMPLOYEES (EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
    VALUES (2, 'jsmith', 'js', 'smith', 'IT', 1);
INSERT INTO EMPLOYEES (EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
    VALUES (3, 'mjones', 'mj', 'jones', 'HR', 1);
INSERT INTO EMPLOYEES (EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
    VALUES (4, 'klink', 'kl', 'link', 'IT', 0);
    
INSERT INTO SUPPLIER (SUPPID, NAME)
    VALUES (1, 'XYZ Office Supplies');
INSERT INTO SUPPLIER (SUPPID, NAME)
    VALUES (2, 'ABC Office Product');

INSERT INTO CATEGORY (CATID, NAME)
    VALUES (1, 'Audio Visual');
INSERT INTO CATEGORY (CATID, NAME)
    VALUES (2, 'Art Supplies');
INSERT INTO CATEGORY (CATID, NAME)
    VALUES (3, 'Cleaning Supplies');
INSERT INTO CATEGORY (CATID, NAME)
    VALUES (4, 'Computer Supplies');
INSERT INTO CATEGORY (CATID, NAME)
    VALUES (5, 'Desk Accessories');
INSERT INTO CATEGORY (CATID, NAME)
    VALUES (6, 'Writing Supplies');
INSERT INTO CATEGORY (CATID, NAME)
    VALUES (7, 'Printer Supplies');
    
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('ACM-10414', 2, 'Ruler', '12 inch stainless steel', 3.79, 2);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('APO-CG7070', 1, 'Transparency', 'Quick dry ink jet', 24.49, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('APO-FXL', 1, 'Overhead Bulb', 'High intensity replacement bulb', 12.00, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('APO-MP1200', 1, 'Laser Pointer', 'General Purpose laser pointer', 29.99, 2);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('BIN-68401', 2, 'Colored Pencils', 'Non toxic 12 pack', 2.84, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('DRA-91249', 3, 'All-Purpose Cleaner', 'Use on all washable', 4.29, 2);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('FOH-28124', 3, 'Paper Hand Towels', '320 sheets per roll', 5.25, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('IMN-41143', 4, 'CD-R', '700 mb with jewel case', 1.09, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('IMN-44766', 4, '3.5 inch Disks', 'High Density Formatted Box of 10', 5.99, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('KMW-12164', 4, 'Monitor wipes', 'Non abrasive lint free', 6.99, 2);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('KMW-22256', 4, 'Dust Blaster', 'Ozone safe no CFCs', 8.99, 2);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('MMM-6200', 2, 'Clear Tape', '1 inch wide 6 rolls', 3.90, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('MMM-9700P', 1, 'Overhead Projector', 'Portable with travel cover', 759.97, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
    VALUES ('OIC-5000', 2, 'Glue Stick', 'Oderless non toxic', 1.99, 2);

/*3.1 Select*/
SELECT * FROM EMPLOYEES;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT = 'HR';
SELECT * FROM EMPLOYEES WHERE USERNAME = 'JSMITH' AND DEPARTMENT = 'HR';
SELECT * FROM EMPLOYEES WHERE MANAGER = 1 OR DEPARTMENT = 'HR';

/*3.2 ORDER BY*/
SELECT NAME FROM PRODUCT ORDER BY NAME ASC;
SELECT NAME FROM PRODUCT ORDER BY NAME DESC;
SELECT * FROM CATEGORY ORDER BY NAME;

/*3.3 INSERT INTO*/
INSERT INTO EMPLOYEES (EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
    VALUES (5, 'xkim', 'xk', 'kim', 'HR', 0);
    
INSERT INTO CATEGORY (CATID, NAME)
    VALUES (8, 'Candy Farm');
    
INSERT INTO SUPPLIER (SUPPID, NAME)
    VALUES (3, 'QWE Office Supplies');
INSERT INTO SUPPLIER (SUPPID, NAME)
    VALUES (4, 'RTY Office Product');
INSERT INTO SUPPLIER (SUPPID, NAME)
    VALUES (5, 'UIO Office Product');
    
/*3.4 UPDATE*/
UPDATE PRODUCT SET UNITCOST = 0.01 WHERE NAME = 'Ruler';
UPDATE CATEGORY SET DESCRIPT = 'FAKE NEWS' WHERE NAME = 'Computer Supplies' OR NAME = 'Cleaning Supplies';

/*3.5 LIKE*/
SELECT USERNAME FROM EMPLOYEES WHERE USERNAME LIKE '%j%';
SELECT NAME FROM PRODUCT WHERE NAME LIKE '%O%';

/*3.5 BETWEEN*/
SELECT NAME FROM PRODUCT WHERE UNITCOST BETWEEN 3 AND 10;
SELECT NAME FROM PRODUCT WHERE UNITCOST BETWEEN 500 AND 800;

/*3.6 DELETE*/
DELETE FROM PRODUCT WHERE CATID = (SELECT CATID FROM CATEGORY WHERE NAME = 'Audio Visual');
DELETE FROM CATEGORY WHERE NAME = 'Audio Visual';

DELETE FROM SUPPLIER WHERE SUPPID = 3;
DELETE FROM SUPPLIER WHERE SUPPID = 4;
DELETE FROM SUPPLIER WHERE SUPPID = 5;

/*4.0 SQL FUNCTIONS*/
/*4.1 SYSTEM DEFINED SCALAR FUNCTIONS*/
SET SERVEROUT ON;
CREATE OR REPLACE FUNCTION GET_LENGTH(N_ID VARCHAR)
    RETURN NUMBER AS THE_LENGTH NUMBER;
    STR VARCHAR(80);
    BEGIN
        SELECT NAME INTO STR FROM PRODUCT WHERE NAME = N_ID;
        THE_LENGTH := LENGTH(STR);
        RETURN THE_LENGTH;
    END;
/

DECLARE
    LENGTH_RETURN NUMBER;
    THE_PRODUCT VARCHAR(80);
BEGIN
    THE_PRODUCT := 'Laser Pointer';
    LENGTH_RETURN := GET_LENGTH(THE_PRODUCT);
    DBMS_OUTPUT.PUT_LINE(LENGTH_RETURN);
END;
/

CREATE OR REPLACE FUNCTION TO_UPPERCASE(USER_NAME VARCHAR)
    RETURN VARCHAR AS DUMMY VARCHAR(80);
    STR VARCHAR(80);
    BEGIN 
        UPDATE EMPLOYEES SET USERNAME = UPPER(USER_NAME) WHERE USERNAME = USER_NAME;
        SELECT USERNAME INTO DUMMY FROM EMPLOYEES WHERE USERNAME = UPPER(USER_NAME);
        RETURN DUMMY;
    END;
/
DECLARE
    STR VARCHAR(80);
BEGIN
    STR := 'dclark';
    DBMS_OUTPUT.PUT_LINE(TO_UPPERCASE(STR));
END;
/

/*4.2 SYSTEM DEFINED AGGREGATE FUNCTION*/

CREATE OR REPLACE FUNCTION SUM_UNITCOST
    RETURN NUMBER AS DUMMY NUMBER;
    BEGIN
        SELECT SUM(UNITCOST) INTO DUMMY FROM PRODUCT;
        RETURN DUMMY;
    END;
/
DECLARE
    DUMMY NUMBER;
BEGIN
    DUMMY := SUM_UNITCOST;
    DBMS_OUTPUT.PUT_LINE(DUMMY);
END;
/

CREATE OR REPLACE FUNCTION COUNT_PRODUCT
    RETURN NUMBER AS DUMMY NUMBER;
    BEGIN
        SELECT COUNT(*) INTO DUMMY FROM PRODUCT;
        RETURN DUMMY;
    END;
/
DECLARE
    DUMMY NUMBER;
BEGIN
    DUMMY := COUNT_PRODUCT;
    DBMS_OUTPUT.PUT_LINE(DUMMY);
END;
/

/*4.3 USER DEFINED SCALAR FUNCTION*/
CREATE OR REPLACE FUNCTION ADD_PRODUCTS(PID_1 VARCHAR, PID_2 VARCHAR)
    RETURN NUMBER AS DUMMY NUMBER;
    NUM1 NUMBER;
    NUM2 NUMBER;
    BEGIN
        SELECT UNITCOST INTO NUM1 FROM PRODUCT WHERe NAME = PID_1;
        SELECT UNITCOST INTO NUM2 FROM PRODUCT WHERE NAME = PID_2;
        DUMMY := NUM1 + NUM2;
        RETURN DUMMY;
    END;
/
DECLARE
    DUMMY NUMBER;
    STR1 VARCHAR(80);
    STR2 VARCHAR(80);
BEGIN
    STR1 := 'Ruler';
    STR2 := 'Transparency';
    DUMMY := ADD_PRODUCTS(STR1, STR2);
    DBMS_OUTPUT.PUT_LINE(DUMMY);
END;
/

/*4.4 USER DEFINED TABLE VALUED FUNCTION*/
CREATE OR REPLACE FUNCTION CHECK_MANAGER(USER_NAME VARCHAR)
    RETURN VARCHAR AS DUMMY VARCHAR(80);
    HOLDER NUMBER;
    BEGIN
        SELECT MANAGER INTO HOLDER FROM EMPLOYEES WHERE USERNAME = USER_NAME;
        IF HOLDER = 0 THEN
            DUMMY := 'FALSE';
        ELSE
            DUMMY := 'TRUE';
        END IF;
        RETURN DUMMY;
    END;
/
DECLARE
    STR VARCHAR(80);
    DUMMY VARCHAR(80);
BEGIN
    STR := 'mjones';
    DUMMY := CHECK_MANAGER(STR);
    DBMS_OUTPUT.PUT_LINE(DUMMY);
END;
/

/*5.0 STORED PROCEDURES*/
/*5.1 BASIC STORED PROCEDURE*/

CREATE OR REPLACE PROCEDURE GET_EMPLOYEES(
    E_CURSOR OUT SYS_REFCURSOR
)IS 
BEGIN
    OPEN E_CURSOR FOR 
    SELECT * FROM EMPLOYEES;
END;
/
DECLARE
    E_CURSOR SYS_REFCURSOR;
    TEMP_CURSOR EMPLOYEES%ROWTYPE;
BEGIN
    GET_EMPLOYEES(E_CURSOR);
    LOOP
        FETCH E_CURSOR INTO TEMP_CURSOR;
        EXIT WHEN E_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_CURSOR.USERNAME || ', ' || TEMP_CURSOR.DEPARTMENT || ', ' || TEMP_CURSOR.MANAGER );
    END LOOP;
    CLOSE E_CURSOR;
END;
/

CREATE OR REPLACE PROCEDURE GET_PRODUCT(
    P_CURSOR OUT SYS_REFCURSOR
)IS 
BEGIN
    OPEN P_CURSOR FOR 
    SELECT * FROM PRODUCT;
END;
/
DECLARE
    P_CURSOR SYS_REFCURSOR;
    TEMP_CURSOR PRODUCT%ROWTYPE;
BEGIN
    GET_PRODUCT(P_CURSOR);
    LOOP
        FETCH P_CURSOR INTO TEMP_CURSOR;
        EXIT WHEN P_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_CURSOR.NAME || ', ' || TEMP_CURSOR.UNITCOST);
    END LOOP;
    CLOSE P_CURSOR;
END;
/

/*5.2 STORED PROCEDURE INPUT PARAMATER*/
CREATE OR REPLACE PROCEDURE TAKE_PRODUCTID(
    P_ID IN PRODUCT.PRODUCTID%TYPE,
    P_CURSOR OUT SYS_REFCURSOR
)IS 
BEGIN
    OPEN P_CURSOR FOR 
    SELECT * FROM PRODUCT WHERE PRODUCTID = P_ID;
END;
/
DECLARE
    P_CURSOR SYS_REFCURSOR;
    TEMP_CURSOR PRODUCT%ROWTYPE;
BEGIN
    TAKE_PRODUCTID('KMW-12164', P_CURSOR);
    LOOP
        FETCH P_CURSOR INTO TEMP_CURSOR;
        EXIT WHEN P_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_CURSOR.NAME || ', ' || TEMP_CURSOR.DESCRIPT);
    END LOOP;
    CLOSE P_CURSOR;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_MANAGER(
    N_EMPLOYEEID IN NUMBER,
    N_USERNAME IN VARCHAR,
    N_PASSWORD IN VARCHAR,
    N_NAME IN VARCHAR,
    N_DEPARTMENT IN VARCHAR,
    N_MANAGER IN NUMBER
)AS
BEGIN
    INSERT INTO EMPLOYEES VALUES (N_EMPLOYEEID, N_USERNAME, N_PASSWORD, N_NAME, N_DEPARTMENT, N_MANAGER);
END;
/
DECLARE
    N_EMPLOYEEID NUMBER;
    N_USERNAME VARCHAR(20);
    N_PASSWORD VARCHAR(20);
    N_NAME VARCHAR(25);
    N_DEPARTMENT CHAR(2);
    N_MANAGER NUMBER;
BEGIN
    N_EMPLOYEEID := 6;
    N_USERNAME := 'gdellen';
    N_PASSWORD := 'gd';
    N_NAME := 'dellen';
    N_DEPARTMENT := 'IT';
    N_MANAGER := 1;
    INSERT_MANAGER(N_EMPLOYEEID, N_USERNAME, N_PASSWORD,N_NAME, N_DEPARTMENT, N_MANAGER);
END;
/

/*5.3 STORED PROCEDURE OUTPUT PARAMATER*/
CREATE OR REPLACE PROCEDURE PRODUCT_TOTAL(
    DUMMY OUT NUMBER
)AS
BEGIN 
    SELECT SUM(UNITCOST) INTO DUMMY FROM PRODUCT;
END;
/
DECLARE
    DUMMY NUMBER;
BEGIN
    PRODUCT_TOTAL(DUMMY);
    DBMS_OUTPUT.PUT_LINE(DUMMY);
END;
/

/*6.0 TRANSATIONS*/
CREATE OR REPLACE PROCEDURE INSERT_EMP(
    N_EMPLOYEEID IN NUMBER,
    N_USERNAME IN VARCHAR,
    N_PASSWORD IN VARCHAR,
    N_NAME IN VARCHAR,
    N_DEPARTMENT IN VARCHAR,
    N_MANAGER IN NUMBER
)AS
BEGIN
    INSERT INTO EMPLOYEES VALUES (N_EMPLOYEEID, N_USERNAME, N_PASSWORD, N_NAME, N_DEPARTMENT, N_MANAGER);
    COMMIT;
END;
/
DECLARE
    N_EMPLOYEEID NUMBER;
    N_USERNAME VARCHAR(20);
    N_PASSWORD VARCHAR(20);
    N_NAME VARCHAR(25);
    N_DEPARTMENT CHAR(2);
    N_MANAGER NUMBER;
BEGIN
    N_EMPLOYEEID := 7;
    N_USERNAME := 'qfrance';
    N_PASSWORD := 'qf';
    N_NAME := 'france';
    N_DEPARTMENT := 'HR';
    N_MANAGER := 0;
    INSERT_EMP(N_EMPLOYEEID, N_USERNAME, N_PASSWORD,N_NAME, N_DEPARTMENT, N_MANAGER);
END;
/

