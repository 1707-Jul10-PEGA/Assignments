/* -- USED TO DROP TABLES IF NEED
DROP TABLE ORDERITEM;
DROP TABLE ORDERS;
DROP TABLE EMPLOYEES;
DROP TABLE PRODUCT;
DROP TABLE CATEGORYS;
DROP TABLE SUPPLIER;
*/

/*
SELECT * FROM EMPLOYEES;
SELECT * FROM ORDERS;
SELECT * FROM ORDERITEM;
SELECT * FROM CATEGORYS;
SELECT * FROM PRODUCT;
SELECT * FROM SUPPLIER;
*/

SET SERVEROUTPUT ON

/*
 * CREATING TABLES
 */

CREATE TABLE EMPLOYEES
( EMPLOYEEID NUMBER NOT NULL,
  USERNAME VARCHAR2(20) NOT NULL,
  PASSWORD VARCHAR2(20) NOT NULL,
  NAME VARCHAR2(25) NOT NULL,
  DEPARTMENT VARCHAR2(2) NOT NULL,
  MANAGER CHAR(1) NOT NULL,
  CONSTRAINT PK_EMPLOYEEID PRIMARY KEY (EMPLOYEEID)
);

CREATE TABLE ORDERS
( ORDERID NUMBER NOT NULL,
  EMPLOYEEID NUMBER NOT NULL,
  ORDERDATE DATE NOT NULL,
  STATUS CHAR NOT NULL,
  CONSTRAINT PK_ORDERID PRIMARY KEY (ORDERID)
);

CREATE TABLE ORDERITEM
( ORDERID NUMBER NOT NULL,
  PRODUCTID VARCHAR2(12) NOT NULL,
  QUANTITY NUMBER NOT NULL,
  CONSTRAINT PK_ORDERITEM PRIMARY KEY (ORDERID, PRODUCTID)
);
  
CREATE TABLE CATEGORYS
( CATID NUMBER NOT NULL,
  NAME VARCHAR2(80) NULL,
  DESCRIPT VARCHAR2(255) NULL,
  CONSTRAINT PK_CATID PRIMARY KEY (CATID)
);

CREATE TABLE PRODUCT
( PRODUCTID VARCHAR(12) NOT NULL,
  CATID NUMBER NOT NULL,
  NAME VARCHAR2(80) NULL,
  DESCRIPT VARCHAR(255) NULL,
  UNITCOST NUMBER NULL,
  SUPPID NUMBER NOT NULL,
  CONSTRAINT PK_PRODUCTID PRIMARY KEY (PRODUCTID)
);

CREATE TABLE SUPPLIER
( SUPPID NUMBER NOT NULL,
  NAME VARCHAR2(80) NULL,
  CONSTRAINT PK_SUPPID PRIMARY KEY (SUPPID)
);

/*
 * ADDING FOREIGN KEY CONSTRAINTS
 */

ALTER TABLE ORDERITEM ADD CONSTRAINT FK_ORDERID
    FOREIGN KEY (ORDERID) REFERENCES ORDERS (ORDERID) ON DELETE CASCADE;

ALTER TABLE ORDERITEM ADD CONSTRAINT FK_PRODUCTID
    FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT (PRODUCTID) ON DELETE CASCADE;

ALTER TABLE ORDERS ADD CONSTRAINT FK_EMPLOYEEID
    FOREIGN KEY (EMPLOYEEID) REFERENCES EMPLOYEES (EMPLOYEEID) ON DELETE CASCADE;

ALTER TABLE PRODUCT ADD CONSTRAINT FK_CATID
    FOREIGN KEY (CATID) REFERENCES CATEGORYS (CATID) ON DELETE CASCADE;

ALTER TABLE PRODUCT ADD CONSTRAINT FK_SUPPID
    FOREIGN KEY (SUPPID) REFERENCES SUPPLIER (SUPPID) ON DELETE CASCADE;
    
INSERT INTO EMPLOYEES (EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER) VALUES (1, 'dclark', 'drc', 'Derick Clark','HR', 'F');
INSERT INTO EMPLOYEES (EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER) VALUES (2, 'jsmith', 'jc', 'Jayden Smith','HR', 'T');
INSERT INTO EMPLOYEES (EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER) VALUES (3, 'mjones', 'mj', 'Mr. Jones', 'HR', 'T');
INSERT INTO EMPLOYEES (EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER) VALUES (4, 'klink', 'kl', 'Klink link', 'IT', 'F');

INSERT INTO SUPPLIER (SUPPID, NAME) VALUES (1, 'XYZ Office Supplies');
INSERT INTO SUPPLIER (SUPPID, NAME) VALUES (2, 'ABC Office Products');

INSERT INTO CATEGORYS (CATID, NAME) VALUES (1, 'Audio Visual');
INSERT INTO CATEGORYS (CATID, NAME) VALUES (2, 'Art Visual');
INSERT INTO CATEGORYS (CATID, NAME) VALUES (3, 'Cleaning Supplies');
INSERT INTO CATEGORYS (CATID, NAME) VALUES (4, 'Computer Supplies');
INSERT INTO CATEGORYS (CATID, NAME) VALUES (5, 'Desk Accessories');
INSERT INTO CATEGORYS (CATID, NAME) VALUES (6, 'Writing Supplies');
INSERT INTO CATEGORYS (CATID, NAME) VALUES (7, 'Printer Supplies');

INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('ACM-10414', 2 , 'Ruler', '12 inch stainless steel', 3.79, 2);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('APO-CG7070', 1 , 'Transparency', 'Quick dry ink jet', 24.49, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('APO-FXL', 1 , 'Overhead Bulb', 'High intensity replacement bulb', 12.00, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('APO-MP1200', 1 , 'Laser Pointer', 'General purpose laser pointer', 29.99, 2);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('BIN-68401', 2 , 'Colored Pencils', 'Non toxic 12 pack', 2.84, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('DRA-91249', 3 , 'All-Purpose Cleaner', 'Use on all washable surfaces', 4.29, 2);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('FOH-28124', 3 , 'Paper Hand Towels', '320 sheets per roll', 5.25, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('IMN-41143', 4 , 'CD-R', '700 mb with jewel case', 1.09, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('IMN-44766', 4 , '3.5 inch Disks', 'High Density Formatted Box of 10', 5.99, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('KMW-12164', 4 , 'Monitor wipes', 'Non  abrasive lint free', 6.99, 2);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('KMW-22256', 4 , 'Dust Blaster', 'Ozone safe no CFCs', 8.99, 2);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('MMM-6200', 2 , 'Clear Tape', '1 inch wide 6 rolls', 3.90, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('MMM-9700P', 1 , 'Overhead Projector', 'Portable with travel cover', 759.97, 1);
INSERT INTO PRODUCT (PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID) VALUES ('OIC-5000', 2 , 'Glue Stick', 'Oderless non toxic', 1.99, 2);

/*3.1 SELECT */
SELECT * FROM EMPLOYEES;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT = 'HR';
SELECT * FROM EMPLOYEES WHERE USERNAME = 'jsmith' AND DEPARTMENT = 'HR';
SELECT * FROM EMPLOYEES WHERE MANAGER = 'T' OR DEPARTMENT = 'HR';

/*3.2 ORDER BY */
SELECT NAME FROM PRODUCT ORDER BY NAME ASC;
SELECT NAME FROM PRODUCT ORDER BY NAME DESC;
SELECT NAME FROM CATEGORYS ORDER BY NAME;

/*3.3 INSERT INTO */
INSERT INTO EMPLOYEES (EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER) VALUES (5, 'bkruppa', 'bk', 'Blake Kruppa', 'CO', 'T');
INSERT INTO CATEGORYS (CATID, NAME) VALUES (8, 'Sandwich');
INSERT INTO SUPPLIER (SUPPID, NAME) VALUES (3, 'Downtheblock Sandwiches');
INSERT INTO SUPPLIER (SUPPID, NAME) VALUES (4, 'Downtheblock Laundry');
INSERT INTO SUPPLIER (SUPPID, NAME) VALUES (5, 'Downtheblock Abbey');

/*3.4 UPDATE */
UPDATE PRODUCT SET UNITCOST = 100 WHERE NAME = 'Ruler';
UPDATE CATEGORYS SET DESCRIPT = 'NEW DESCRIPTION' WHERE NAME = 'Computer Supplies' OR NAME = 'Cleaning Supplies';

/*3.5 LIKE */
SELECT USERNAME FROM EMPLOYEES WHERE USERNAME LIKE 'j%';
SELECT NAME FROM PRODUCT WHERE NAME LIKE 'O%';

/*3.6 BETWEEN */
SELECT NAME FROM PRODUCT WHERE UNITCOST BETWEEN 3 AND 100;
SELECT NAME FROM PRODUCT WHERE UNITCOST BETWEEN 500 AND 800;

/*3.7 DELETE */
DELETE FROM CATEGORYS WHERE NAME = 'Audio Visual';
DELETE FROM SUPPLIER WHERE SUPPID BETWEEN 3 AND 5;

/*4.0 SQL Function */
/*4.1 SYSTEM DEFINED SCARLAR FUNCTIONS */
SELECT LENGTH(DESCRIPT) FROM PRODUCT WHERE NAME = 'Ruler'; --LASER POINTER WAS DELETED BECAUSE WE DELETED AUDIO VISUAL
SELECT UPPER(USERNAME) FROM EMPLOYEES WHERE EMPLOYEEID = 1;

/*4.2 SYSTEM DEFINED AGGREGATE FUNCTIONS */
SELECT SUM(UNITCOST) FROM PRODUCT;
SELECT COUNT(PRODUCTID) FROM PRODUCT;

/*4.3 USER DEFINED SCALAR FUNCTIONS */
CREATE OR REPLACE FUNCTION ADDTWO(X IN NUMBER, Y IN NUMBER)
    RETURN NUMBER AS
    P_SUM NUMBER;
    BEGIN
        P_SUM := X + Y;
        RETURN P_SUM;
    END;
/

SELECT ADDTWO(A.UNITCOST, B.UNITCOST) FROM PRODUCT A, PRODUCT B WHERE A.NAME = 'Ruler' AND B.NAME = 'Colored Pencils';

/*4.4 USER DEFINED TABLE VALUED FUNCTION */
CREATE OR REPLACE FUNCTION HAS_MANAGER(IN_USERNAME IN VARCHAR2)
    RETURN CHAR AS
    HAS_MANAGER CHAR(1);
    MANAGER_CHAR CHAR(1);
    BEGIN
        SELECT MANAGER INTO MANAGER_CHAR FROM EMPLOYEES WHERE USERNAME = IN_USERNAME;
        IF MANAGER_CHAR = 'T' THEN
            HAS_MANAGER := 'F';
            RETURN HAS_MANAGER;
        ELSE
            HAS_MANAGER := 'T';
            RETURN HAS_MANAGER;
        END IF;
    END;
/

SELECT HAS_MANAGER(USERNAME) FROM EMPLOYEES WHERE EMPLOYEEID = 1;
SELECT HAS_MANAGER(USERNAME) FROM EMPLOYEES WHERE EMPLOYEEID = 2;

/* 5.0 STORED PROCEDURES */
/* 5.1 BASIC STORED PROCEDURES */
CREATE OR REPLACE PROCEDURE ALL_EMPLOYEES
    (SELECTED_ROW OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN SELECTED_ROW FOR SELECT * FROM EMPLOYEES;
    END;
/

DECLARE
    SELECTED_ROW SYS_REFCURSOR;
    EMPLOYEEID NUMBER;
    USERNAME VARCHAR2(20);
    PASSWORD VARCHAR2(20);
    NAME VARCHAR2(25);
    DEPARTMENT VARCHAR2(2);
    MANAGER CHAR(1);
    BEGIN
        ALL_EMPLOYEES(SELECTED_ROW);
        LOOP
            FETCH SELECTED_ROW INTO EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER;
            EXIT WHEN SELECTED_ROW%NOTFOUND;
    
            DBMS_OUTPUT.PUT_LINE('USERNAME: ' || USERNAME || ' DEPARTMENT: ' || DEPARTMENT || ' MANAGER: ' || MANAGER);
        
            END LOOP;
        
            CLOSE SELECTED_ROW;
    END;
/



/*8.0

