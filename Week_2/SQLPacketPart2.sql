/* CREATE COMPANY DATABASE USING DDL */
CREATE USER OfficeSupply
IDENTIFIED BY p4ssw0rd;
DROP USER OfficeSupply;

/* 2.0 CREATING TABLE AND RELATIONSHIP */
/* 2.1 CREATE TABLES FOR OFFICE SUPPLY */
CREATE TABLE EMPLOYEES(
    EmployeeID NUMBER NOT NULL,
    UserName varchar2(20) NOT NULL,
    Password varchar2(20) NOT NULL,
    Name varchar(25) NOT NULL,
    Department char(2) NOT NULL,
    Manager NUMBER NOT NULL,
    CONSTRAINT PK_EMPLOYEES PRIMARY KEY (EMPLOYEEID)
);

CREATE TABLE ORDERS(
    OrderID NUMBER NOT NULL,
    EmployeeID NUMBER NOT NULL,
    OrderDate DATE NOT NULL,
    Status char NOT NULL,
    Constraint PK_ORDER PRIMARY KEY (ORDERID),
    Constraint fk_employee_order FOREIGN KEY (employeeid)
        REFERENCES employees (employeeid)
          ON DELETE CASCADE
);

CREATE TABLE CATEGORY(
    CatID NUMBER NOT NULL,
    NAME VARCHAR(80) NULL,
    DESCRIPT VARCHAR(255) NULL,
    CONSTRAINT pk_category PRIMARY KEY (CatID)
    );
    
CREATE TABLE SUPPLIER(
    SuppID NUMBER NOT NULL,
    NAME varchar(80) NULL,
    CONSTRAINT pk_supp PRIMARY KEY (SuppID)
);

CREATE TABLE PRODUCT(
    PRODUCTID NUMBER NOT NULL,
    CatID NUMBER NOT NULL,
    NAME VARCHAR(80) NULL,
    DESCRIPT VARCHAR(255) NULL,
    UnitCost NUMBER NULL,
    SuppID NUMBER NOT NULL,
    CONSTRAINT pk_product PRIMARY KEY (PRODUCTID),
    CONSTRAINT fk_product_category FOREIGN KEY (CatID)
        REFERENCES CATEGORY (CatID)
          ON DELETE CASCADE,
    CONSTRAINT fk_product_supplier FOREIGN KEY (SuppID)
        REFERENCES SUPPLIER (SuppID)
          ON DELETE CASCADE
);

CREATE TABLE ORDERITEM(
    ORDERID NUMBER NOT NULL,
    PRODUCTID NUMBER NOT NULL,
    QUANTITY NUMBER NOT NULL,
    Constraint fk_order_product FOREIGN KEY (PRODUCTID)
        REFERENCES PRODUCT (PRODUCTID)
          ON DELETE CASCADE,
    CONSTRAINT pk_orderitem PRIMARY KEY(ORDERID,PRODUCTID)
);



/* 2.2 CREATING RELATIONSHIP */
INSERT INTO EMPLOYEES VALUES (1,'SAMSM','PASSWORD','SAM SMITH', 'IT',1);
INSERT INTO EMPLOYEES VALUES (2,'KANEK','PASSWORD','KEITH KANE', 'IT',1);
INSERT INTO EMPLOYEES VALUES (3,'JANED','PASSWORD','JANE DOE', 'HR',1);

INSERT INTO ORDERS VALUES(1,1,TO_DATE('2000-12-8','YYYY-MM-DD'),'A');
INSERT INTO ORDERS VALUES(2,1,TO_DATE('2010-05-21','YYYY-MM-DD'),'A');
INSERT INTO ORDERS VALUES(3,2,TO_DATE('2012-07-18','YYYY-MM-DD'),'A');
INSERT INTO ORDERS VALUES(4,3,TO_DATE('2010-10-16','YYYY-MM-DD'),'A');

INSERT INTO CATEGORY VALUES (1, 'GROCERY', 'FOOD');
INSERT INTO CATEGORY VALUES (2, 'OUTDOORS', 'BIKE');
INSERT INTO CATEGORY VALUES (3, 'ELECTRONIC', 'PS4');

INSERT INTO SUPPLIER VALUES(1,'WALMART');
INSERT INTO SUPPLIER VALUES(2,'OUTDOOR');
INSERT INTO SUPPLIER VALUES(3,'SAMSUNG');
INSERT INTO SUPPLIER VALUES(4,'ASUS');

INSERT INTO PRODUCT VALUES(1,1,'MILK','MILK',1.25,1);
INSERT INTO PRODUCT VALUES(2,1,'MEAT','CHICKEN',10.25,1);
INSERT INTO PRODUCT VALUES(3,2,'BIKE','BIKE',200.00,2);
INSERT INTO PRODUCT VALUES(4,3,'LAPTOP','LAPTOP',800.00,4);
INSERT INTO PRODUCT VALUES(5,3,'PS4','PS4',300.00,3);
INSERT INTO PRODUCT VALUES(6,3,'SMARTPHONE','SMARTPHONE',500.00,3);

INSERT INTO ORDERITEM VALUES(1,1,3);
INSERT INTO ORDERITEM VALUES(1,2,4);
INSERT INTO ORDERITEM VALUES(2,3,1);
INSERT INTO ORDERITEM VALUES(3,4,1);
INSERT INTO ORDERITEM VALUES(3,1,1);
INSERT INTO ORDERITEM VALUES(4,2,2);




/*3.0 PERFORMING sql queries */

INSERT INTO EMPLOYEES VALUES(1, 'dclark', 'drc', 'Dave', 'HR', 1);
INSERT INTO EMPLOYEES VALUES(2, 'jsmith', 'js', 'John', 'IT', 2);
INSERT INTO EMPLOYEES VALUES(3, 'mjones', 'mj', 'Mike', 'HR', 2);
INSERT INTO EMPLOYEES VALUES(4, 'klink', 'kl', 'Kara', 'IT', 1);

INSERT INTO CATEGORY VALUES(1, 'Audio Visual',' ');
INSERT INTO CATEGORY VALUES(2, 'Art Supplies',' ');
INSERT INTO CATEGORY VALUES(3, 'Cleaning Supplies',' ');
INSERT INTO CATEGORY VALUES(4, 'Computer Supplies',' ');
INSERT INTO CATEGORY VALUES(5, 'Desk Accessories',' ');
INSERT INTO CATEGORY VALUES(6, 'Writing Supplies',' ');
INSERT INTO CATEGORY VALUES(7, 'Printer Supplies',' ');

INSERT INTO SUPPLIER VALUES (1, 'XYZ Office supplies');
INSERT INTO SUPPLIER VALUES(2, 'ABC Office products');

INSERT INTO PRODUCT VALUES(1, 2, 'Ruler', '12 inch stainless steel', 3.79, 2);
INSERT INTO PRODUCT VALUES(2, 1, 'Transparency', 'Quick dry ink jet', 24.49, 1);
INSERT INTO PRODUCT VALUES(3, 1, 'Overhead Bulb', 'High intensity replacement bulb', 12.00, 1);
INSERT INTO PRODUCT VALUES(4, 1, 'Laser Pointer', 'General purpose laser pointer', 29.99, 2);
INSERT INTO PRODUCT VALUES(5, 2, 'Colored pencils', 'Non toxic 12 pack', 2.84, 1);
INSERT INTO PRODUCT VALUES(6, 3, 'All purpose cleaner', 'Use on all washable surfaces', 4.29, 2);
INSERT INTO PRODUCT VALUES(7, 3, 'Paper hand towels', '320 sheets per roll', 5.25, 1);
INSERT INTO PRODUCT VALUES(8, 4, 'CD-R', '700 mb with jewel case', 1.09, 1);
INSERT INTO PRODUCT VALUES(9, 4, '3.5 inch disks', 'High density formatted box of 10', 5.99, 1);
INSERT INTO PRODUCT VALUES(10, 4, 'Monitor wipes', 'Non abrasive lint free', 6.99, 2);
INSERT INTO PRODUCT VALUES(11, 4, 'Dust blaster', 'Ozone safe no CFSs', 8.99, 2);
INSERT INTO PRODUCT VALUES(12, 2, 'Clear tape', '1 inch wide 6 rolls', 3.90, 1);
INSERT INTO PRODUCT VALUES(13, 1, 'Overhead projector', 'Portable with travel cover', 759.97, 1);
INSERT INTO PRODUCT VALUES(14, 2, 'Glue stick', 'Odorless non toxic', 1.99, 2);

/* 3.1 SELECT*/
SELECT * FROM EMPLOYEES;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT = 'HR';
SELECT * FROM EMPLOYEES WHERE USERNAME = 'jsmith' AND DEPARTMENT = 'HR';
SELECT * FROM EMPLOYEES WHERE MANAGER = 2 OR DEPARTMENT = 'HR';

/* 3.2 ORDER BY*/
SELECT NAME FROM PRODUCT ORDER BY NAME ASC;
SELECT NAME FROM PRODUCT ORDER BY NAME DESC;
SELECT * FROM CATEGORY ORDER BY NAME DESC;

/*3.3 INSERT INTO*/
INSERT INTO EMPLOYEES VALUES (5,'SAMSM','PASSWORD','SAM SMITH', 'IT',1);
INSERT INTO CATEGORY VALUES (8, 'ELECTRONIC', 'PS4');
INSERT INTO SUPPLIER VALUES(3,'OUTDOOR');
INSERT INTO SUPPLIER VALUES(4,'SAMSUNG');
INSERT INTO SUPPLIER VALUES(5,'ASUS');

/*3.4 UPDATE */
UPDATE PRODUCT SET UNITCOST = 1.75 WHERE NAME = 'Ruler';

UPDATE CATEGORY SET DESCRIPT = 'PAPER INK' WHERE NAME = 'Computer Supplies'; 
UPDATE CATEGORY SET DESCRIPT = 'SCRUBS SOAP' WHERE NAME = 'Cleaning Supplies';

/* 3.5 LIKE */
SELECT USERNAME FROM EMPLOYEES WHERE USERNAME LIKE 'j%';
SELECT NAME FROM PRODUCT WHERE NAME LIKE 'O%';

/*3.6 BETWEEN */
SELECT NAME FROM PRODUCT WHERE UNITCOST BETWEEN 3 AND 10;
SELECT NAME FROM PRODUCT WHERE UNITCOST BETWEEN 500 AND 800;

/*3.7 DELETE */
DELETE FROM CATEGORY WHERE NAME='Audio Visual';

DELETE FROM SUPPLIER WHERE SUPPID = 3;
DELETE FROM SUPPLIER WHERE SUPPID = 4;
DELETE FROM SUPPLIER WHERE SUPPID = 5;

/*4.0 SQL FUNCTIONS*/
/*4.1 SYSTEM DEFINED SCALAR FUNCTION */
CREATE OR REPLACE FUNCTION DESCR_LENGTH
    RETURN NUMBER
    AS  
    LEN NUMBER;
    BEGIN
        SELECT LENGTH(P.DESCRIPT) INTO LEN FROM PRODUCT P WHERE NAME = 'LASER POINTER';
        RETURN LEN;
    END;
    /
CREATE OR REPLACE FUNCTION UPPERCASE_USERNAME(E_NAME in VARCHAR)
    RETURN VARCHAR
    AS  
    STR VARCHAR(255);
    BEGIN
        SELECT UPPER(USERNAME) INTO STR FROM EMPLOYEES E WHERE E.NAME = E_NAME;
        RETURN STR;
    END;
    /    
SELECT UPPERCASE_USERNAME('Dave') FROM DUAL;

/* 4.2 SYSTEM DEFINED AGGREGATED FUNCTIONS */
CREATE OR REPLACE FUNCTION SUM_COST
    RETURN NUMBER
    AS  
    SUM_COST NUMBER;
    BEGIN
        SELECT SUM(UNITCOST) INTO SUM_COST FROM PRODUCT;
        RETURN SUM_COST;
    END;
    /    
SELECT SUM_COST() FROM DUAL;
CREATE OR REPLACE FUNCTION COUNT_PRODUCT
    RETURN NUMBER
    AS  
    COUNT_ROW NUMBER;
    BEGIN
        SELECT COUNT(*) INTO COUNT_ROW FROM PRODUCT;
        RETURN COUNT_ROW;
    END;
    /   
SELECT COUNT_PRODUCT() FROM DUAL;

/*4.3 USER DEFINED SCALAR FUNCTIONS */
CREATE OR REPLACE FUNCTION PRODUCT_COST(PRICEA IN NUMBER, PRICEB IN NUMBER)
    RETURN NUMBER
    AS  
    COST NUMBER;
    BEGIN
        SELECT PRICEA + PRICEB INTO COST FROM DUAL;
        RETURN COST;
    END;
    /   
SELECT PRODUCT_COST(12.45, 14.75) FROM DUAL;

/*4.4 USER DEFINED TABLE VALUED FUNCTIONS */
CREATE OR REPLACE FUNCTION USERNAME_MANAGER(E_USERNAME in VARCHAR2)
    RETURN  VARCHAR2
    AS  
    ROW_COUNT NUMBER;
    BEGIN
        SELECT COUNT(*) INTO ROW_COUNT FROM EMPLOYEES E WHERE E.USERNAME = E_USERNAME AND E.MANAGER = 2;
        IF ROW_COUNT > 0 THEN RETURN 'TRUE';
        END IF;
        RETURN 'FALSE';
    END;
    /   
SELECT USERNAME_MANAGER('jsmith') FROM DUAL;

/* 5.0 STORED PROCEDURE */
/* 5.1 BASIC STORED PROCEDURE */
 CREATE OR REPLACE PROCEDURE all_employee_name( SELECT_ROW OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN SELECT_ROW FOR SELECT E.USERNAME, E.DEPARTMENT, E.MANAGER FROM EMPLOYEES E;
    END;
    /
SET SERVEROUTPUT ON 
DECLARE
    SELECT_ROW SYS_REFCURSOR;
    USERNAME VARCHAR(255);
    DEPARTMENT VARCHAR(255);
    MANAGER NUMBER;
    BEGIN
        all_employee_name( SELECT_ROW);
        LOOP
            FETCH SELECT_ROW INTO USERNAME, DEPARTMENT, MANAGER;
            EXIT WHEN SELECT_ROW%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(USERNAME || ' ' || DEPARTMENT || ' ' || MANAGER);
        END LOOP;
        CLOSE SELECT_ROW;
    END;
    /
 CREATE OR REPLACE PROCEDURE all_PRODUCT( SELECT_ROW OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN SELECT_ROW FOR SELECT P.NAME, P.UNITCOST FROM PRODUCT P;
    END;
    /
SET SERVEROUTPUT ON 
DECLARE
    SELECT_ROW SYS_REFCURSOR;
    NAME VARCHAR(255);
    UNITCOST NUMBER;
    BEGIN
        all_PRODUCT( SELECT_ROW);
        LOOP
            FETCH SELECT_ROW INTO NAME, UNITCOST;
            EXIT WHEN SELECT_ROW%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(NAME || ' ' || UNITCOST);
        END LOOP;
        CLOSE SELECT_ROW;
    END;
    /
    
/* 5.2 STORED PROCEDURE INPUT PARAMETER */
 CREATE OR REPLACE PROCEDURE PRODUCT_DESCRIPT( SELECT_ROW OUT SYS_REFCURSOR, PRODUCT_ID IN NUMBER)
    AS
    BEGIN
        OPEN SELECT_ROW FOR SELECT P.NAME, P.DESCRIPT FROM PRODUCT P WHERE P.PRODUCTID = PRODUCT_ID;
    END;
    /
SET SERVEROUTPUT ON 
DECLARE
    SELECT_ROW SYS_REFCURSOR;
    NAME VARCHAR(255);
    DESCRIPT VARCHAR(255);
    BEGIN
        PRODUCT_DESCRIPT( SELECT_ROW, 10);
        LOOP
            FETCH SELECT_ROW INTO NAME,  DESCRIPT;
            EXIT WHEN SELECT_ROW%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(NAME || ' ' || DESCRIPT);
        END LOOP;
        CLOSE SELECT_ROW;
    END;
    /
 CREATE OR REPLACE PROCEDURE INSERT_NEW_MANAGER(
    E_ID NUMBER, 
    E_USERNAME VARCHAR2, 
    E_PASSWORD VARCHAR2, 
    E_NAME VARCHAR2, 
    E_DEPARTMENT VARCHAR2)
    AS
    BEGIN
        INSERT INTO EMPLOYEES VALUES (E_ID, E_USERNAME, E_PASSWORD, E_NAME, E_DEPARTMENT,2);
    END;
    /


/*5.3 STORED PROCEDURE OUTPUT PARAMETERS */
 CREATE OR REPLACE PROCEDURE TOTAL_COST(TOTAL OUT NUMBER)
    AS
    BEGIN
        SELECT SUM(UNITCOST) INTO TOTAL FROM PRODUCT;
    END;
    /
DECLARE
    TOTAL NUMBER;
    BEGIN
        TOTAL_COST(TOTAL);
        DBMS_OUTPUT.PUT_LINE(TOTAL);
    END;
    /
CREATE OR REPLACE PROCEDURE EMPLOYEE_USERNAME_PASSWORD( SELECT_ROW OUT SYS_REFCURSOR, E_ID IN NUMBER)
    AS
    BEGIN
        OPEN SELECT_ROW FOR SELECT E.USERNAME, E.PASSWORD FROM EMPLOYEES E WHERE E.EMPLOYEEID = E_ID;
    END;
    /
SET SERVEROUTPUT ON 
DECLARE
    SELECT_ROW SYS_REFCURSOR;
    USERNAME VARCHAR(255);
    PASSWORD VARCHAR(255);
    BEGIN
        EMPLOYEE_USERNAME_PASSWORD( SELECT_ROW, 2);
        LOOP
            FETCH SELECT_ROW INTO USERNAME, PASSWORD;
            EXIT WHEN SELECT_ROW%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(USERNAME || ' ' || PASSWORD);
        END LOOP;
        CLOSE SELECT_ROW;
    END;
    /

/*6.0 TRANSACTION */
CREATE OR REPLACE PROCEDURE INSERT_EMPLOYEE( 
    E_ID NUMBER, 
    E_USERNAME VARCHAR, 
    E_PASSWORD VARCHAR, 
    E_NAME VARCHAR, 
    E_DEPARTMENT VARCHAR,
    E_MANAGER NUMBER)
    AS
    BEGIN
        COMMIT;
        Set Transaction Name 'INSERT EMPLOYEE';
        INSERT INTO EMPLOYEES VALUES (E_ID, E_USERNAME, E_PASSWORD, E_NAME, E_DEPARTMENT,E_MANAGER);
    END;
    /

CREATE OR REPLACE PROCEDURE UPDATE_UNITCOST( P_ID IN NUMBER, P_COST IN NUMBER)
    AS
    BEGIN
        COMMIT;
        Set Transaction Name 'UPDATE UNIT COST';
        UPDATE PRODUCT SET UNITCOST = P_COST WHERE PRODUCTID = P_ID;
    END;
    /
EXECUTE UPDATE_UNITCOST( 1, .99);

CREATE OR REPLACE PROCEDURE update_2_CATEGORY(C_ID1 IN NUMBER, C_NAME1 IN VARCHAR, C_D1 IN VARCHAR, C_ID2 IN NUMBER, C_NAME2 IN VARCHAR, C_D2 IN VARCHAR) AS
BEGIN
    commit;
    SET TRANSACTION NAME 'UPDATE 2 CATEGORY';
    UPDATE Category SET Name=C_NAME1, Descript=C_D1 WHERE CatID=C_ID1;
    UPDATE Category SET Name=C_NAME2, Descript=C_D2 WHERE CatID=C_ID2;
    commit;
END;
/
EXECUTE update_2_CATEGORY(1,'FOOD','DESCR',2,'FOOD2','DESCR');

/* 7.0 TRIGGERS */
/* 7.1 AFTER/FOR */
CREATE OR REPLACE TRIGGER EMPLOYEE_INSERT_TRIG
    AFTER INSERT ON CATEGORY
    FOR EACH ROW
    BEGIN
        DBMS_OUTPUT.PUT_LINE('AFTER INSERTION INTO CATEGORY');
    END;
    /
CREATE OR REPLACE TRIGGER ALBUM_INSERT_TRIG
    AFTER UPDATE ON CATEGORY
    FOR EACH ROW
    BEGIN
        DBMS_OUTPUT.PUT_LINE('AFTER UPDATE INTO CATEGORY');
    END;
    /
CREATE OR REPLACE TRIGGER CUSTOMER_DELETE_TRIG
    AFTER DELETE ON CATEGORY
    FOR EACH ROW
    BEGIN
        DBMS_OUTPUT.PUT_LINE('AFTER DELETE FROM CATEGORY');
    END;
    /
    
/* 7.2 INSTEAD OF */
CREATE VIEW vw_PRODUCT AS SELECT * FROM PRODUCT;

CREATE OR REPLACE TRIGGER PRODUCT_ONDELETE
    INSTEAD OF DELETE ON vw_PRODUCT
    FOR EACH ROW
    BEGIN
        IF (:old.UNITCOST < 500) THEN
            DELETE FROM vw_PRODUCT WHERE PRODUCTID = :old.PRODUCTID;
            DBMS_OUTPUT.PUT_LINE('PRODUCT ON DELETE');
        END IF;
    END;
    /
    
/* 8.0 JOINS */
/*8.1 INNER JOINS*/
SELECT * FROM PRODUCT P INNER JOIN CATEGORY C ON P.CATID = C.CATID;
SELECT * FROM EMPLOYEES E INNER JOIN ORDERS O ON O.EMPLOYEEID = E.EMPLOYEEID;
/* 8.2 OUTER */
SELECT * FROM PRODUCT P FULL OUTER JOIN ORDERITEM O ON O.PRODUCTID = P.PRODUCTID;
SELECT * FROM EMPLOYEES E FULL OUTER JOIN ORDERS O ON O.EMPLOYEEID = E.EMPLOYEEID;
/* 8.3 RIGHT */
SELECT * FROM ORDERS RIGHT JOIN ORDERITEM O ON O.ORDERID = ORDERS.ORDERID;
SELECT * FROM PRODUCT P RIGHT JOIN ORDERITEM O ON O.PRODUCTID = P.PRODUCTID;
/* 8.4 LEFT */
SELECT * FROM PRODUCT P LEFT JOIN CATEGORY C ON P.CATID = C.CATID;
SELECT * FROM EMPLOYEES E LEFT JOIN ORDERS O ON O.EMPLOYEEID = E.EMPLOYEEID;
/*8.5 CROSS-JOIN */
SELECT * FROM PRODUCT P CROSS JOIN CATEGORY;
/*8.6 SELF-JOIN */
SELECT * FROM EMPLOYEES A, EMPLOYEES B WHERE A.EMPLOYEEID = B.EMPLOYEEID;

/* 9.0 VIEWS */
ALTER TABLE Employees ADD SSN NUMBER;
ALTER TABLE Employees ADD Salary NUMBER;
CREATE OR REPLACE VIEW ALL_EXCEPT_SSN_SALARY AS SELECT employeeid, username, password, name, department, manager FROM Employees;

CREATE OR REPLACE VIEW PRODUCT_NAME_DESCRIPTION AS SELECT Name, Descript FROM Product;

/*10.0 INDEX */
CREATE CLUSTER PERSON ( EMPLOYEE_ID  NUMBER(4), EMPLOYEE_NAME VARCHAR2(255)) 
    SIZE 512 
    STORAGE (INITIAL 100K NEXT 50K); 

CREATE INDEX idx_PERSON ON CLUSTER PERSON;