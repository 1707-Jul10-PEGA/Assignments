--Task 1.1 Create Company Database
DROP USER OfficeSupply;

CREATE USER OfficeSupply
IDENTIFIED BY p4ssw0rd;

--DROP USER OfficeSupply;

--Task 2.1 Create Tables for OfficeSupply
DROP TABLE ORDERITEM;
DROP TABLE PRODUCT;
DROP TABLE CATEGOR;
DROP TABLE ORDERS;
DROP TABLE SUPPLIER;
DROP TABLE EMPLOYEES;


CREATE TABLE Employees(
    EmployeeID NUMBER NOT NULL,
    UserName VARCHAR(20) NOT NULL,
    Password VARCHAR(20) NOT NULL,
    Name VARCHAR(25) NOT NULL,
    Department CHAR(2) NOT NULL,
    Manager NUMBER NOT NULL,
    CONSTRAINT Employees PRIMARY KEY (EmployeeID));
    
CREATE TABLE SUPPLIER(
    SUPPID NUMBER NOT NULL,
    NAME VARCHAR(80) NULL,
    CONSTRAINT SUPPLIER 
    PRIMARY KEY (SUPPID));
    
CREATE TABLE ORDERS(
    ORDERID NUMBER NOT NULL,
    EMPLOYEEID NUMBER NOT NULL,
    ORDERDATE DATE NOT NULL,
    STATUS CHAR NOT NULL,
    CONSTRAINTS ORDERS 
    PRIMARY KEY (ORDERID),
    FOREIGN KEY (EMPLOYEEID) REFERENCES EMPLOYEES(EMPLOYEEID));
    
CREATE TABLE CATEGOR(
    CATID NUMBER NOT NULL,
    NAME VARCHAR(80) NULL,
    DESCRIPT VARCHAR(255) NULL,
    CONSTRAINT CATEGOR
    PRIMARY KEY (CATID));
    
CREATE TABLE PRODUCT(
    PRODUCTID NUMBER NOT NULL,
    CATID NUMBER NOT NULL,
    NAME VARCHAR(80) NULL,
    DESCRIPT VARCHAR(255) NULL,
    UNITCOST NUMBER NULL,
    SUPPID NUMBER NOT NULL,
    CONSTRAINTS PRODUCT_pk 
    PRIMARY KEY (PRODUCTID),
    CONSTRAINTS PRODUCT_fk
    FOREIGN KEY (CATID) REFERENCES CATEGOR(CATID),
    FOREIGN KEY (SUPPID) REFERENCES SUPPLIER(SUPPID));
    
CREATE TABLE ORDERITEM(
    ORDERID NUMBER NOT NULL,
    PRODUCTID NUMBER NOT NULL,
    QUANTITY NUMBER NOT NULL,
    CONSTRAINTS ORDERITEM 
    PRIMARY KEY (ORDERID, PRODUCTID),
    FOREIGN KEY (ORDERID) REFERENCES ORDERS(ORDERID),
    FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID));
    
--Task 2.2 1:N Relationships


--Employee table
INSERT INTO EMPLOYEES(EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
VALUES(1, 'dclark', 'drc', 'Dave', 'HR', 1);

INSERT INTO EMPLOYEES(EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
VALUES(2, 'jsmith', 'js', 'John', 'IT', 2);

INSERT INTO EMPLOYEES(EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
VALUES(3, 'mjones', 'mj', 'Mike', 'HR', 2);

INSERT INTO EMPLOYEES(EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
VALUES(4, 'klink', 'kl', 'Kara', 'IT', 1);

--Supplier table
INSERT INTO SUPPLIER(SUPPID, NAME)
VALUES (1, 'XYZ Office supplies');

INSERT INTO SUPPLIER(SUPPID, NAME)
VALUES(2, 'ABC Office products');

--Categor table
INSERT INTO CATEGOR(CATID, NAME)
VALUES(1, 'Audio Visual');

INSERT INTO CATEGOR(CATID, NAME)
VALUES(2, 'Art Supplies');

INSERT INTO CATEGOR(CATID, NAME)
VALUES(3, 'Cleaning Supplies');

INSERT INTO CATEGOR(CATID, NAME)
VALUES(4, 'Computer Supplies');

INSERT INTO CATEGOR(CATID, NAME)
VALUES(5, 'Desk Accessories');

INSERT INTO CATEGOR(CATID, NAME)
VALUES(6, 'Writing Supplies');

INSERT INTO CATEGOR(CATID, NAME)
VALUES(7, 'Printer Supplies');

--Product table
INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(1, 2, 'Ruler', '12 inch stainless steel', 3.79, 2);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(2, 1, 'Transparency', 'Quick dry ink jet', 24.49, 1);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(3, 1, 'Overhead Bulb', 'High intensity replacement bulb', 12.00, 1);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(4, 1, 'Laser Pointer', 'General purpose laser pointer', 29.99, 2);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(5, 2, 'Colored pencils', 'Non toxic 12 pack', 2.84, 1);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(6, 3, 'All purpose cleaner', 'Use on all washable surfaces', 4.29, 2);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(7, 3, 'Paper hand towels', '320 sheets per roll', 5.25, 1);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(8, 4, 'CD-R', '700 mb with jewel case', 1.09, 1);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(9, 4, '3.5 inch disks', 'High density formatted box of 10', 5.99, 1);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(10, 4, 'Monitor wipes', 'Non abrasive lint free', 6.99, 2);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(11, 4, 'Dust blaster', 'Ozone safe no CFSs', 8.99, 2);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(12, 2, 'Clear tape', '1 inch wide 6 rolls', 3.90, 1);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(13, 1, 'Overhead projector', 'Portable with travel cover', 759.97, 1);

INSERT INTO PRODUCT(PRODUCTID, CATID, NAME, DESCRIPT, UNITCOST, SUPPID)
VALUES(14, 2, 'Glue stick', 'Odorless non toxic', 1.99, 2);


--1:N between Employees and Orders

INSERT INTO ORDERS(ORDERID, EMPLOYEEID, ORDERDATE, STATUS)
VALUES(1111, 1, '11-MAR-99', 'A');

INSERT INTO ORDERS(ORDERID, EMPLOYEEID, ORDERDATE, STATUS)
VALUES(1112, 1, '11-JUN-00', 'A');

--1:N between Orders and OrderItem

INSERT INTO ORDERITEM(ORDERID, PRODUCTID, QUANTITY)
VALUES (1111, 13, 1);

INSERT INTO ORDERITEM(ORDERID, PRODUCTID, QUANTITY)
VALUES (1111, 6, 3);

INSERT INTO ORDERITEM(ORDERID, PRODUCTID, QUANTITY)
VALUES (1111, 3, 1);

INSERT INTO ORDERITEM(ORDERID, PRODUCTID, QUANTITY)
VALUES (1111, 2, 10);

--1:N between Product and Orderitem (see productid 13 above)
INSERT INTO ORDERITEM(ORDERID, PRODUCTID, QUANTITY)
VALUES (1112, 13, 1);

--1:N between Supplier and Product already established above

--1:N between category and product already established above

--Task 3.1 Select

SELECT * FROM EMPLOYEES;

SELECT * FROM EMPLOYEES
WHERE DEPARTMENT = 'HR';

SELECT * FROM EMPLOYEES
WHERE USERNAME = 'jsmith' AND DEPARTMENT = 'HR';

SELECT * FROM EMPLOYEES
WHERE MANAGER = 2 OR DEPARTMENT = 'HR';

--TASK 3.2 ORDER BY

SELECT NAME FROM PRODUCT
ORDER BY NAME ASC;

SELECT NAME FROM PRODUCT
ORDER BY NAME DESC;

SELECT * FROM CATEGOR
ORDER BY NAME;

--TASK 3.3 INSERT INTO

INSERT INTO EMPLOYEES(EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
VALUES(14, 'JWAFFLE', 'JW', 'WAFFLES', 'HR', 1);

INSERT INTO CATEGOR(CATID, NAME)
VALUES(8, 'Swarms of Angry Bees');

INSERT INTO SUPPLIER(SUPPID, NAME)
VALUES(3, 'Bee Products Intl');

INSERT INTO SUPPLIER(SUPPID, NAME)
VALUES(4, 'ABC Gum Inc');

INSERT INTO SUPPLIER(SUPPID, NAME)
VALUES(5, 'Davy Jones Footlocker');

--TASK 3.4 UPDATE

UPDATE PRODUCT
SET UNITCOST = .50
WHERE NAME = 'Ruler';

UPDATE CATEGOR
SET DESCRIPT = 'Do not swallow'
WHERE NAME = 'Computer Supplies' OR NAME = 'Cleaning Supplies';

--Task 3.5 LIKE

SELECT USERNAME FROM EMPLOYEES
WHERE USERNAME LIKE 'j%';

SELECT NAME FROM PRODUCT
WHERE NAME LIKE 'O%';

--Task 3.6 Between

SELECT NAME FROM PRODUCT
WHERE UNITCOST BETWEEN 3 AND 10;

SELECT NAME FROM PRODUCT
WHERE UNITCOST BETWEEN 500 AND 800;

--TASK 3.7 DELETE

ALTER TABLE PRODUCT
DROP CONSTRAINT PRODUCT_fk;

DELETE FROM CATEGOR
WHERE NAME='Audio Visual';

DELETE FROM SUPPLIER
WHERE SUPPID = 3;
DELETE FROM SUPPLIER
WHERE SUPPID = 4;
DELETE FROM SUPPLIER
WHERE SUPPID = 5;

--TASK 4.1 SYSTEM DEFINED SCALAR FUNCTIONS
SELECT LENGTH(DESCRIPT) FROM PRODUCT
WHERE NAME = 'Laser Pointer';

SELECT UPPER(USERNAME) FROM EMPLOYEES;

--TASK 4.2 SYSDEF AGGREGATE FUNCTIONS
SELECT SUM(UNITCOST) FROM PRODUCT;

SELECT COUNT(NAME) FROM PRODUCT;

--TASK 4.3 USERDEF SCALAR FUNCTIONS
CREATE OR REPLACE FUNCTION MYFUNC(NUM1 NUMBER, NUM2 NUMBER)
RETURN NUMBER
AS OUTPT NUMBER;
BEGIN
    RETURN(NUM1+NUM2);
END;
/

set serveroutput on;
SELECT * FROM PRODUCT WHERE PRODUCTID = 1 OR PRODUCTID = 2;
DECLARE
    NUM1 NUMBER;
    NUM2 NUMBER;
    NUMOUT NUMBER;
    BEGIN
        SELECT UNITCOST INTO NUM1 FROM PRODUCT WHERE PRODUCTID = 1;
        SELECT UNITCOST INTO NUM2 FROM PRODUCT WHERE PRODUCTID = 2;
        SELECT MYFUNC(NUM1, NUM2) INTO NUMOUT FROM DUAL;
        dbms_output.put_line(NUMOUT);
    END;
    /
    

SELECT CASE MANAGER
    WHEN 2 THEN 'Y'
    ELSE 'N' END
    FROM EMPLOYEES
    WHERE USERNAME = 'dclark';

--TASK 5.1 BASIC STORED PROCEDURES

CREATE OR REPLACE PROCEDURE myprocedure(
    mycursor OUT SYS_REFCURSOR )
AS
BEGIN
  OPEN mycursor FOR SELECT USERNAME, DEPARTMENT, MANAGER 
  FROM EMPLOYEES;
END;
/

variable rc refcursor;
exec MYPROCEDURE( :rc );
print rc

COLUMN PRODNAME HEADING 'NAME' FORMAT a12
COLUMN PRODCOST HEADING 'UNITCOST' FORMAT a10

CREATE OR REPLACE PROCEDURE PROD(
    mycursor OUT SYS_REFCURSOR )
AS
BEGIN
    OPEN mycursor FOR SELECT NAME PRODNAME, UNITCOST PRODCOST
    FROM PRODUCT;
END;
/


variable Fc refcursor;
exec PROD( :Fc );
print Fc

--TASK 5.2 STORED PROCEDURE INPUT PARAMETERS

CREATE OR REPLACE PROCEDURE NAMDES(SELECID IN NUMBER, mycursor OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN mycursor FOR SELECT NAME, DESCRIPT
    FROM PRODUCT WHERE PRODUCTID = SELECID;
END;
/

variable Cc refcursor;
exec NAMDES(1, :Cc );
print Cc

CREATE OR REPLACE PROCEDURE INSMAN(NEWID IN NUMBER, NEWUSER IN VARCHAR, NEWPASS IN VARCHAR, NEWNAME IN VARCHAR, NEWDEPT IN VARCHAR)
AS
BEGIN
    INSERT INTO EMPLOYEES(EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
    VALUES(NEWID, NEWUSER, NEWPASS, NEWNAME, NEWDEPT, 2);
END;
/

EXEC INSMAN(15, 'BMAN', 'HONEY', 'BEES', 'SA');
SELECT * FROM EMPLOYEES;

--TASK 5.3 STORED PROCEDURE OUTPUT PARAMETERS

CREATE OR REPLACE PROCEDURE SUMCOST(OUTPT OUT NUMBER)
AS
BEGIN
    SELECT SUM(UNITCOST) INTO OUTPT FROM PRODUCT;
END;
/
VARIABLE SUMM NUMBER;
EXEC SUMCOST(:SUMM);
PRINT SUMM

CREATE OR REPLACE PROCEDURE IDINFO(INID IN NUMBER, OUTCURSOR OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN OUTCURSOR FOR SELECT USERNAME, PASSWORD
    FROM EMPLOYEES WHERE INID = EMPLOYEEID;
END;
/
VARIABLE OC REFCURSOR;
EXEC IDINFO(1, :OC);
PRINT OC

--Task 6.0 Transactions

CREATE OR REPLACE PROCEDURE NESTTEST
AS
BEGIN
    BEGIN
        INSERT INTO EMPLOYEES(EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER)
        VALUES (16, 'FRED', 'BURGER', 'FRED', 'FR', 1);
        
        UPDATE PRODUCT
        SET UNITCOST = 100
        WHERE PRODUCTID = 5;
        
        UPDATE CATEGOR
        SET NAME = 'WAFFLE CLEANER', DESCRIPT = 'CLEANS YOUR WAFFLES'
        WHERE CATID = 5;
        UPDATE CATEGOR
        SET NAME = 'TACO CLEANER', DESCRIPT = 'CLEANS YOUR TACOS'
        WHERE CATID = 6;
    END;
END;
/

--TASK 7.1 BEFORE/AFTER TRIGGERS
CREATE SEQUENCE ET_SEQ MINVALUE 1 MAXVALUE 9999999999999999999
INCREMENT BY 1 START WITH 1;
/

CREATE OR REPLACE TRIGGER T1
    AFTER INSERT ON CATEGOR
    FOR EACH ROW
    BEGIN
        SELECT ET_SEQ.NEXTVAL INTO    :NEW.CATID FROM DUAL;
    END;
/
    
CREATE OR REPLACE TRIGGER T2
    AFTER UPDATE ON CATEGOR
    FOR EACH ROW
    BEGIN
        SELECT 2*2 FROM DUAL;
    END;
/

CREATE OR REPLACE TRIGGER T3
    AFTER DELETE ON CATEGOR
    FOR EACH ROW
    BEGIN
        SELECT 2*2 FROM DUAL;
    END;
/

--TASK 7.2 INSTEAD OF TRIGGERS
CREATE OR REPLACE TRIGGER T4
    BEFORE DELETE ON PRODUCT
    FOR EACH ROW
    BEGIN
        IF :OLD.UNITCOST < 500 THEN
            RAISE_APPLICATION_ERROR(-20001,'Record cannot be deleted.');
        END IF;
    END;
/

--TASK 8.1 INNER JOIN
SELECT * FROM PRODUCT P INNER JOIN CATEGOR C ON P.CATID = C.CATID;
SELECT * FROM EMPLOYEES E INNER JOIN ORDERS O ON E.EMPLOYEEID = O.EMPLOYEEID;

--TASK 8.2 OUTER JOIN
SELECT * FROM PRODUCT P FULL OUTER JOIN ORDERITEM I ON P.PRODUCTID = I.PRODUCTID;
SELECT * FROM ORDERS O FULL OUTER JOIN EMPLOYEES E ON O.EMPLOYEEID = E.EMPLOYEEID;

--TASK 8.3 RIGHT JOIN
SELECT * FROM ORDERS O RIGHT JOIN ORDERITEM I ON O.ORDERID = I.ORDERID;
SELECT * FROM PRODUCT P RIGHT JOIN ORDERITEM I ON P.PRODUCTID = I.PRODUCTID;

--tASK 8.4 LEFT JOIN
SELECT * FROM PRODUCT P LEFT JOIN CATEGOR C ON P.CATID = C.CATID;
SELECT * FROM EMPLOYEES E LEFT JOIN ORDERS O ON E.EMPLOYEEID = O.EMPLOYEEID;

--TASK 8.5 CROSS JOIN
SELECT * FROM PRODUCT P CROSS JOIN CATEGOR C ORDER BY P.NAME;

--TASK 8.6 SELF JOIN
SELECT * FROM EMPLOYEES E1, EMPLOYEES E2 WHERE E1.MANAGER <> E2.MANAGER;

--TASK 9.0 VIEWS
ALTER TABLE EMPLOYEES ADD (SSN NUMBER, SALARY NUMBER);
SELECT * FROM EMPLOYEES;

CREATE VIEW SECURE AS 
SELECT EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER
FROM EMPLOYEES;

SELECT * FROM SECURE;

CREATE VIEW SHORTPROD AS
SELECT NAME, DESCRIPT
FROM PRODUCT;

COLUMN NAME FORMAT A15
COLUMN DESCRIPT FORMAT A30

SELECT * FROM SHORTPROD;

--TASK 10.1 CLUSTERED INDEX
CREATE TABLE MYTABLE(
MYID INT,
MYVALUE VARCHAR(255),
CONSTRAINT MYPK PRIMARY KEY (MYID))
ORGANIZATION INDEX;

--TASK 11 ADMINISTRATION
--SEE C:/Users/Matthew Seifert for export2.sql file