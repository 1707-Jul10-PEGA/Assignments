

/* The worksheet had false and true for manager, there wasn't manager_id */

CREATE TABLE EMPLOYEES(
    EMPLOYEEID INT,
    USERNAME VARCHAR(20) NOT NULL,
    PASS_WORD VARCHAR(20) NOT NULL,   
    EMP_NAME VARCHAR(25) NOT NULL,
    DEPARTMENT VARCHAR(2) NOT NULL,
    MANAGER_ID INT NOT NULL,
    
    CONSTRAINT PK_EMP PRIMARY KEY (EMPLOYEEID)


);

CREATE TABLE ORDERS(
    OrderID INT,
    EmployeeID INT NOT NULL,
    ORDERDATE DATE NOT NULL,
    status char NOT NULL,
    
    CONSTRAINT ORDERS_PK PRIMARY KEY(ORDERID),
    CONSTRAINT ORDERS_FK FOREIGN KEY (EmployeeID) REFERENCES EMPLOYEES(EMPLOYEEID) 
);

CREATE TABLE SUPPLIER(
    SUPPID INT,
    NAME VARCHAR(80),
    CONSTRAINT SUPPLIER_PK PRIMARY KEY(SUPPID)

);

/* 3.0 requires ProductID to be a varchar*/
CREATE TABLE product(
    ProductID varchar(116),
    CatID int not null,
    Name varchar(80),
    descript varchar(255),
    UnitCost number(10,2),
    SuppID INT NOT NULL,
    CONSTRAINT PRODUCT_PK PRIMARY KEY (PRODUCTID),
    
    CONSTRAINT PRODUCT_FK FOREIGN KEY (SUPPID) REFERENCES SUPPLIER(SUPPID),
    CONSTRAINT PRODUCT_FK2 FOREIGN KEY (CATID) REFERENCES CATEGORY(CATID)
    
);

/* I don't understand why the worksheet want to define a composite primary key for this table*/
/* It's pretty obvious that there is a many to many relationship */
CREATE TABLE OrderItem(
    OrderID int not null,
    ProductId int not null,
    quantity int not null,
    
    CONSTRAINT ORDERITEM_FK FOREIGN KEY (ORDERID) REFERENCES ORDERS(ORDERID), 
    CONSTRAINT ORDERITEM_FK2 FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID)
);


CREATE TABLE category(
    CatID int,
    NAME varchar(80),
    Descript varchar(255),
    
    constraint category_pk primary key (CatId)
);
/*
ALTER TABLE ORDERITEM ADD CONSTRAINT ORDERITEM_FK2 FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID);
ALTER TABLE PRODUCT MODIFY PRODUCTID VARCHAR(16);
ALTER TABLE ORDERITEM MODIFY PRODUCTID VARCHAR(16);
*/

/* 3.1 */
SELECT * FROM EMPLOYEES;

SELECT * FROM EMPLOYEES WHERE DEPARTMENT = 'HR';

SELECT * FROM EMPLOYEES WHERE DEPARTMENT = 'HR' AND USERNAME = 'jsmith';

SELECT * FROM EMPLOYEES WHERE MANAGER_ID = 1 AND DEPARTMENT = 'HR';

/* 3.2 */
SELECT NAME FROM PRODUCT
ORDER BY NAME ASC;

SELECT NAME FROM PRODUCT
ORDER BY NAME DESC;

SELECT * FROM CATEGORY
ORDER BY NAME;

/* 3.3 */

INSERT INTO EMPLOYEES VALUES(5, 'bchen', 'bc', 'Bryan Chen', 'EN' , 1);

INSERT INTO CATEGORY VALUES(8, 'Illegal Drugs', 'SOLD IN THE BACK ALLEY');

INSERT INTO SUPPLIER VALUES(3, 'Drugz 4 U');

/* 3.4 */

UPDATE PRODUCT SET UNITCOST = 1.29 WHERE NAME = 'Ruler';

UPDATE CATEGORY SET DESCRIPT = 'Computer Accessories (USB, External Storage, etc)' where CATID = 4;

UPDATE CATEGORY SET DESCRIPT = 'Cleaning products for desks/computers/windows' where CATID = 3;

/* 3.5 */
SELECT USERNAME FROM EMPLOYEES
WHERE USERNAME LIKE 'j%';

SELECT NAME FROM PRODUCT
WHERE NAME LIKE 'O%';

/* 3.6 */
SELECT NAME FROM PRODUCT WHERE UNITCOST BETWEEN 3 AND 10;

SELECT NAME FROM PRODUCT WHERE UNITCOST BETWEEN 500 AND 800;

/* 3.7 */
DELETE FROM CATEGORY WHERE CATID = 1;

/* I only inserted into supplier once ?? */
DELETE FROM SUPPLIER WHERE SUPPID = 10;
DELETE FROM SUPPLIER WHERE SUPPID = 11;
DELETE FROM SUPPLIER WHERE SUPPID = 12;

/* 4.1 */
CREATE OR REPLACE FUNCTION LASER_POINTER_LENGTH
    RETURN NUMBER
    AS
        RET_VAL NUMBER;    
    BEGIN
        SELECT LENGTH(NAME) INTO RET_VAL FROM PRODUCT WHERE NAME = 'Laser Pointer';
        RETURN RET_VAL;
    END;

/

SELECT LASER_POINTER_LENGTH FROM DUAL;

CREATE OR REPLACE FUNCTION EMPLOYEE_UPPERCASE
    RETURN NUMBER
    AS 
        RETVAL NUMBER;
    BEGIN
        UPDATE EMPLOYEES SET USERNAME = UPPER(USERNAME);
        RETVAL := 0;
        RETURN RETVAL;
    END;
/

/* 4.2 */
CREATE OR REPLACE FUNCTION SUM_PRICE
    RETURN NUMBER
    AS
        RETVAL NUMBER(10,2);
    BEGIN
        SELECT SUM(UNITCOST)INTO RETVAL FROM PRODUCT;
        RETURN RETVAL;
    END;
/

SELECT SUM_PRICE FROM DUAL;

CREATE OR REPLACE FUNCTION COUNT_PRODUCT
    RETURN NUMBER
    AS
        RETVAL NUMBER;
    BEGIN
        SELECT COUNT(*) INTO RETVAL FROM PRODUCT;
        RETURN RETVAL;
    END;
/

SELECT COUNT_PRODUCT FROM DUAL;

/* 4.3 */
CREATE OR REPLACE FUNCTION PRICE_DIFFERENCE(ITEM1 IN NUMBER, ITEM2 IN NUMBER)
    RETURN NUMBER
    AS
        RETVAL NUMBER(10,2);
    BEGIN
        RETVAL := ITEM1 - ITEM2;
        RETURN RETVAL;    
    END;
/

SELECT PRICE_DIFFERENCE(3.2,1.4) FROM DUAL;

/* 4.4 */
CREATE OR REPLACE FUNCTION MANAGER_OR_NOT(uname STRING)
    RETURN NUMBER
    AS 
        RETVAL NUMBER;
    BEGIN
        SELECT MANAGER_ID INTO RETVAL FROM EMPLOYEES WHERE USERNAME = uname;
        RETURN RETVAL;   
    END;
/

SELECT MANAGER_OR_NOT('jsmith') FROM DUAL;


/* 5.1 */

CREATE OR REPLACE PROCEDURE RETURN_ALL_EMPLOYEES(REFCUR OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN REFCUR
    FOR SELECT USERNAME,DEPARTMENT,MANAGER_ID FROM EMPLOYEES;
END;
/

CREATE OR REPLACE PROCEDURE RETURN_ALL_PRODUCTS(REFCUR OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN REFCUR
    FOR SELECT Name,unitprice FROM PRODUCT;
END;
/

/* 5.2 */

CREATE OR REPLACE PROCEDURE GET_NAME_DESCRIPT(nn OUT STRING, des OUT STRING, p_id IN INT)
    AS
    BEGIN
        SELECT NAME INTO NN FROM PRODUCT WHERE PRODUCTID = P_ID;
        SELECT DESCRIPT INTO des FROM PRODUCT WHERE PRODUCTID = P_ID;
    END;
/

CREATE OR REPLACE PROCEDURE  INSERT_MANAGER(E_ID IN INT, UNAME IN STRING, PWORD IN STRING, E_NAME IN STRING, DEP IN STRING)
    AS
    BEGIN
        INSERT INTO EMPLOYEES VALUES(E_ID,UNAME,PWORD,E_NAME,DEP,1);
    END;
/

/* 5.3 */

CREATE OR REPLACE PROCEDURE SUM_PRODUCT_PRICE(TOTAL OUT INT)
    AS
    BEGIN
        TOTAL := SUM_PRICE;
    END;
/

CREATE OR REPLACE PROCEDURE RET_UNAME_PASS(UNAME OUT STRING, PASS OUT STRING, E_ID IN NUMBER)
    AS
    BEGIN
        SELECT USERNAME INTO UNAME FROM EMPLOYEES WHERE EMPLOYEEID = E_ID; 
        SELECT PASS_WORD INTO PASS FROM EMPLOYEES WHERE EMPLOYEEID = E_ID;
    END;
/