/* 2.1 */
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE E
WHERE E.LASTNAME = 'King';

SELECT * FROM EMPLOYEE E
WHERE E.FIRSTNAME = 'Andrew' AND E.REPORTSTO IS NULL;


/* 2.2 */
SELECT * FROM ALBUM A
ORDER BY A.TITLE DESC;

SELECT C.FIRSTNAME FROM CUSTOMER C
ORDER BY C.CITY ASC;

/* 2.3 */
INSERT INTO GENRE (GENREID , NAME)
VALUES (150 , 'DUBSTEP');

INSERT INTO GENRE (GENREID , NAME)
VALUES (149 , 'SCREAMO');

INSERT INTO EMPLOYEE E (E.EMPLOYEEID, E.LASTNAME, E.FIRSTNAME, E.TITLE, E.REPORTSTO, E.BIRTHDATE, E.HIREDATE, E.ADDRESS, E.CITY, E.STATE, E.COUNTRY, E.POSTALCODE, E.PHONE, E.FAX, E.EMAIL)
VALUES (20, 'DOE', 'JOHN', 'TEMP', null, TO_DATE('1:JAN:99', 'DD/MON/YY'), TO_DATE('2:JAN:99', 'DD/MON/YY'), '123 Fake street', 'San Francisco', 'CA', 'USA', '99999', '1234567890', NULL, 'example@example.com');

INSERT INTO EMPLOYEE E (E.EMPLOYEEID, E.LASTNAME, E.FIRSTNAME, E.TITLE, E.REPORTSTO, E.BIRTHDATE, E.HIREDATE, E.ADDRESS, E.CITY, E.STATE, E.COUNTRY, E.POSTALCODE, E.PHONE, E.FAX, E.EMAIL)
VALUES (21, 'DOE', 'JANE', 'TEMP', null, TO_DATE('2:JAN:99', 'DD/MON/YY'), TO_DATE('3:JAN:99', 'DD/MON/YY'), '124 Fake street', 'San Francisco', 'CA', 'USA', '99999', '1234567890', NULL, 'example@example.com');

INSERT INTO CUSTOMER VALUES (900, 'MASON' , 'ALEXANDER', null, '321 Fake Street', 'Imaginary', 'CA', 'USA', '99999', '1234567890', null, 'example@example.com', 3);

INSERT INTO CUSTOMER VALUES (901, 'MASONALLA' , 'ALEXANDERRA', null, '3215 Fake Street', 'Imaginary', 'CA', 'USA', '99999', '1234567890', null, 'example@example.com', 3);

/* 2.4 */
 UPDATE CUSTOMER
 SET FIRSTNAME = 'Robert' , LASTNAME = 'Walter'
 WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';
 
 UPDATE ARTIST A
 SET A.NAME = 'CCR'
 WHERE A.NAME = 'Creedence Clearwater Revival';
 
 /* 2.5 */
 SELECT *  FROM INVOICE
 WHERE BILLINGADDRESS LIKE 'T%';
 
 /* 2.6 */
 SELECT * FROM INVOICE
 WHERE TOTAL BETWEEN 15 AND 30;
 
 SELECT * FROM EMPLOYEE
 WHERE HIREDATE BETWEEN TO_DATE('1-JUN-2003' , 'DD-MON-YYYY') AND TO_DATE('1-MAR-2004' , 'DD-MON-YYYY');
 
 /* 3.1 */
create or replace FUNCTION TIME_NOW
    RETURN DATE
    AS
        TIME_RETURN DATE;
    BEGIN
        TIME_RETURN := SYSDATE;
        RETURN TIME_RETURN;
    END;/

create or replace FUNCTION MEDIA_LENGTH(MID IN NUMBER)
    RETURN NUMBER
    AS
        RET_STR VARCHAR2(120);
        RET_VAL NUMBER;
    BEGIN 
        SELECT NAME INTO RET_STR FROM MEDIATYPE
        WHERE MEDIATYPEID = MID;
        RET_VAL := length(RET_STR);
        RETURN RET_VAL;
    END;
/
/* 3.2 */
CREATE OR REPLACE FUNCTION INVOICE_AVG
    RETURN NUMBER
    AS 
        RET_VAL NUMBER;
    BEGIN
        SELECT AVG(TOTAL) INTO RET_VAL FROM INVOICE;
        RETURN RET_VAL;
    END;
/

create or replace FUNCTION EXPENSIVE_TRACK
    RETURN SYS_REFCURSOR
    IS
        RET_CURSOR SYS_REFCURSOR;

    BEGIN
        OPEN RET_CURSOR
            FOR SELECT * FROM TRACK
                WHERE UNITPRICE IN (SELECT MAX(UNITPRICE) FROM TRACK) AND ROWNUM < 2;
        RETURN RET_CURSOR;
    END;
/
   

/* 3.3 */

CREATE OR REPLACE FUNCTION AVERAGE_INVOICELINE
    RETURN NUMBER
    AS
        RET_VAL NUMBER;
    BEGIN
        SELECT AVG(UNITPRICE) INTO RET_VAL FROM INVOICELINE;
        RETURN RET_VAL;
    END;
/
/* 3.4 */

create or replace FUNCTION BORN_AFTER_1968
    RETURN SYS_REFCURSOR
    AS
        RET_DATE SYS_REFCURSOR;
    BEGIN
        OPEN RET_DATE
        FOR 
        SELECT * FROM EMPLOYEE WHERE HIREDATE > TO_DATE('68' , 'YY');
        RETURN RET_DATE;
    END;
/

/* 4.1 */
CREATE OR REPLACE PROCEDURE FIRST_LAST_EMPLOYEE(REF_OUT IN OUT SYS_REFCURSOR)
    IS
    BEGIN
        OPEN REF_OUT
        FOR SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
    END;
    /


/* 4.2 */
CREATE OR REPLACE PROCEDURE UPDATE_EMP(F_NAME IN VARCHAR ,EMP_ID IN INT)
AS
BEGIN
    UPDATE EMPLOYEE SET FIRSTNAME = F_NAME WHERE EMPLOYEEID = EMP_ID;
END;
/

CREATE OR REPLACE PROCEDURE RET_MANAGER(OUT_CURSOR OUT SYS_REFCURSOR, EMP_ID IN INT)
AS
BEGIN
    OPEN OUT_CURSOR
    FOR
    SELECT EMP2.FIRSTNAME , EMP2.LASTNAME FROM EMPLOYEE EMP1, EMPLOYEE EMP2
    WHERE EMP2.EMPLOYEEID = EMP1.REPORTSTO;
END;
/

/* 4.3 */
CREATE OR REPLACE PROCEDURE RET_COMP_NAME(RET_CURSOR OUT SYS_REFCURSOR, C_ID IN INT)
    AS
    BEGIN
    OPEN RET_CURSOR
    FOR
        SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER
        WHERE CUSTOMERID = C_ID;
    END;
    /

/* 5.0 */

CREATE OR REPLACE PROCEDURE DELETE_INVOICE(I_ID IN INT)
    AS
    BEGIN
        DELETE FROM INVOICELINE
        WHERE INVOICELINE.INVOICEID = I_ID;
        
        DELETE FROM INVOICE
        WHERE INVOICEID = I_ID;     
        
        COMMIT;
    END;
    /
    
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(C_ID IN INT, F_NAME IN VARCHAR2, L_NAME IN VARCHAR2, C_NAME IN VARCHAR2, ADDR IN VARCHAR2, CTY IN VARCHAR2, ST IN VARCHAR2, POSTAL IN VARCHAR2, CNTRY IN VARCHAR2, PHONE_ IN VARCHAR2, FAX_ IN VARCHAR2, EMAIL_ IN VARCHAR2, SUPPORTREPID_ IN INT)
AS
BEGIN
    INSERT INTO CUSTOMER VALUES(C_ID,F_NAME,L_NAME,C_NAME,ADDR,CTY,ST,POSTAL,CNTRY,PHONE_,FAX_,EMAIL_,SUPPORTREPID_);
END;
/
/* 6.1 */
CREATE OR REPLACE TRIGGER EMPLOYEE_INSERT
    AFTER INSERT ON EMPLOYEE
    FOR EACH ROW
    BEGIN
        DBMS_OUTPUT.PUT_LINE(:new.EMPLOYEEID);
    END;
/
CREATE OR REPLACE TRIGGER ALBUM_UPDATE
    AFTER UPDATE ON ALBUM
    FOR EACH ROW
    BEGIN
        DBMS_OUTPUT.PUT_LINE(:new.TITLE);
    END;
/  
CREATE OR REPLACE TRIGGER CUSTOMER_DELETE
    AFTER DELETE ON CUSTOMER
    FOR EACH ROW
    BEGIN
        DBMS_OUTPUT.PUT_LINE(:new.FIRSTNAME);
    END;
/ 
/* 6.2 */
CREATE OR REPLACE TRIGGER INVOICE_DELETE
    INSTEAD OF DELETE ON INVOICE
    FOR EACH ROW
    BEGIN
        SELECT * FROM DUAL;
    END;
    /
/* 7.1 */
SELECT C.FIRSTNAME AS FIRST_NAME , I.INVOICEID FROM CUSTOMER C INNER JOIN INVOICE I
ON C.CUSTOMERID = I.INVOICEID;

/* 7.2 */
SELECT C.FIRSTNAME AS FIRST_NAME , C.LASTNAME, I.INVOICEID, C.CUSTOMERID  FROM CUSTOMER C FULL JOIN INVOICE I
ON C.CUSTOMERID = I.INVOICEID;

/* 7.3 */
SELECT A.NAME as ARTIST_NAME, AL.TITLE FROM ARTIST A RIGHT JOIN ALBUM AL 
ON A.ARTISTID = AL.ARTISTID;

/* 7.4 */
SELECT * FROM ALBUM, ARTIST
WHERE ALBUM.ARTISTID = ARTIST.ARTISTID;

/* 7.5 */
SELECT E.FIRSTNAME, E2.FIRSTNAME, E.REPORTSTO, E2.EMPLOYEEID FROM EMPLOYEE E, EMPLOYEE E2
WHERE E.REPORTSTO = E2.EMPLOYEEID;

/* 8.1 */
CREATE INDEX TRACK_NAME_INDEX ON TRACK(NAME);

/* 9.0 */



