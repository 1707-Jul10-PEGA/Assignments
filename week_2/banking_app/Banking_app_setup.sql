
--CREATE TABLES FOR BANKING APP
--USER IS A INVALID TABLE NAME
CREATE TABLE USER_TABLE( 
 U_ID NUMBER,
 FIRSTNAME VARCHAR2(20) NOT NULL,
 LASTNAME VARCHAR2(20) NOT NULL,
 USERNAME VARCHAR2(20) NOT NULL,
 PASSWORD VARCHAR2(20) NOT NULL,
 PRIVELEDGE NUMBER NOT NULL, --REFERENCES PRIVELEDGES TABLE
 CONSTRAINT PK_USERID PRIMARY KEY(U_ID),
 CONSTRAINT UNIQUE_USER UNIQUE(USERNAME)
);


CREATE INDEX INDEX_USERNAME ON USER_TABLE (USERNAME);

CREATE TABLE CUSTOMERS(--JUNCTION TABLE FOR EMPLOYEES AND CUSTOEMRS
E_ID NUMBER NOT NULL, --Employee u_id
C_ID NUMBER NOT NULL --Customer u_id
);

CREATE TABLE PRIVELEDGES(--LOOKUP TABLE: CUSTOMER, EMPLOYEE, ADMIN
P_ID NUMBER,
TYPE VARCHAR2(8),
CONSTRAINT PK_PID PRIMARY KEY(P_ID),
UNIQUE(TYPE)
);

CREATE TABLE EMPLOYEE_ACCOUNT( --FOR PRIVLEDGES EMPLOYEE AND ADMIN
EA_ID NUMBER, --FOREIGN KEY. EMPLOYEE OR ADMIN WILL NEVER HAVE MORE THAN ONE ACCOUNT, SO THERE U_ID WILL STAY UNIQUE
LASTLOGIN TIMESTAMP NOT NULL,
EMAIL VARCHAR2(30) NOT NULL,
CONSTRAINT PK_EMPLOYEE_ACCOUNT_ID PRIMARY KEY(EA_ID),
CONSTRAINT UNIQUE_EMAIL UNIQUE(EMAIL)
);

CREATE TABLE BANK_ACCOUNT(
BA_ID NUMBER NOT NULL,
U_ID NUMBER NOT NULL, --REFERENCES USERS ID IN USER TABLE
LASTLOGIN TIMESTAMP NOT NULL,
BALANCE NUMBER(10,2),
BANK_ACCOUNT_TYPE NUMBER NOT NULL, --REFERENCES BANK_ACCOUNT_TYPE TABLE
STATUS NUMBER NOT NULL, --HAS THE ACCOUNT BEEN APPROVED OR NOT. BOOLEAN IS INVALID DATA TYPE, SO NUMBER 1: TRUE, NUMBER 0:FALSE
CONSTRAINT PK_ACCOUNTID PRIMARY KEY(BA_ID)
);

CREATE TABLE BANK_ACCOUNT_TYPE(
BAT_ID NUMBER NOT NULL,
TYPE VARCHAR2(8) NOT NULL,
CONSTRAINT PK_ACCOUNTTYPE PRIMARY KEY(BAT_ID),
UNIQUE(TYPE)
);

CREATE TABLE TRANSACTION_LOG(
LOG_ID NUMBER NOT NULL,
TIME_STAMP DATE NOT NULL,
ACTIVITY_TYPE NUMBER NOT NULL, -- REFERENCES ACTIVITY TYPE TABLE
USER_ID NUMBER NOT NULL,
AMOUNT NUMBER(10,2),
CONSTRAINT PK_LOGID PRIMARY KEY(LOG_ID) --
);

CREATE TABLE ACTIVITY_TYPE(--LOOKUP TABLE: WITHDRAW, DEPOSIT, APPROVE, DENY.
ACT_ID NUMBER,
ACTIVITY VARCHAR2(8),
PRIMARY KEY(ACT_ID)
);

--ADD AUTOINCREMETS FOR USERS, BANK_ACCOUNTS, AND TRANSACTION LOGS
CREATE SEQUENCE USER_SEQ MINVALUE 1 MAXVALUE 1100 INCREMENT BY 1 START WITH 1; --EXCLUSIVE BANK. CAN HAVE UP TO 1000 CUSTOMERS AND 100 EMPLOYEES/ADMIN
CREATE SEQUENCE BANK_ACCOUNT_SEQ MINVALUE 1 MAXVALUE 3000 INCREMENT BY 1 START WITH 1; --USERS CAN ONLY HAVE THREE TYPES OF ACCOUNTS: CHECKING, SAVING, AND CREDIT
CREATE SEQUENCE LOG_SEQ MINVALUE 1 MAXVALUE 999999999999999999999 INCREMENT BY 1 START WITH 1;

CREATE OR REPLACE TRIGGER NEW_USER_TRIGGER
    BEFORE INSERT ON USER_TABLE
    FOR EACH ROW
        BEGIN
            SELECT USER_SEQ.NEXTVAL INTO :NEW.U_ID FROM DUAL;
        END;
/

CREATE OR REPLACE TRIGGER NEW_BANK_ACCOUNT_TRIGGER
    BEFORE INSERT ON BANK_ACCOUNT
    FOR EACH ROW
        BEGIN
            SELECT BANK_ACCOUNT_SEQ.NEXTVAL INTO :NEW.BA_ID FROM DUAL;
        END;
/

CREATE OR REPLACE TRIGGER NEW_TRANSACTION_LOG_TRIGGER
    BEFORE INSERT ON TRANSACTION_LOG
    FOR EACH ROW
        BEGIN
            SELECT LOG_SEQ.NEXTVAL INTO :NEW.LOG_ID FROM DUAL;
        END;
/

--CREATE RELATIONSHIPS BETWEEN TABLES

ALTER TABLE CUSTOMERS ADD --FUNCTION TABLE FOR EMPLOYEE AND CUSTOMERS. N:N RELATIONSHIP
(
CONSTRAINT FK_CUSTOMER FOREIGN KEY(E_ID) REFERENCES USER_TABLE(U_ID) ON DELETE CASCADE,
CONSTRAINT FK_EMPLOYEE FOREIGN KEY(C_ID) REFERENCES USER_TABLE(U_ID) ON DELETE CASCADE
);

ALTER TABLE USER_TABLE ADD --ADD A 1:N RELATIONSHIP BETWEEN USERS AND PRIVELEDGES
(
CONSTRAINT FK_PRIVELDGES FOREIGN KEY(PRIVELEDGE) REFERENCES PRIVELEDGES(P_ID) ON DELETE CASCADE
);

ALTER TABLE EMPLOYEE_ACCOUNT ADD --ADD A 1:N RELATIONSHIP BETWEEN USERS AND EMPLOYEE_ACCOUNT
(
CONSTRAINT FK_USERID FOREIGN KEY(EA_ID) REFERENCES USER_TABLE(U_ID)
);

ALTER TABLE BANK_ACCOUNT ADD --ADD A 1:N RELATIONSHIP BETWEEN USERS AND BANK_ACCOUNT AND A 1:N RELATIONSHIP BETWEEN BANK_ACCOUNT AND BANK_ACCOUNT_TYPES
(
CONSTRAINT FK__BA_USERID FOREIGN KEY(U_ID) REFERENCES USER_TABLE(U_ID) ON DELETE CASCADE,
CONSTRAINT FK_BANK_ACCOUNT_TYPE FOREIGN KEY(BANK_ACCOUNT_TYPE) REFERENCES BANK_ACCOUNT_TYPE(BAT_ID)
);

ALTER TABLE TRANSACTION_LOG ADD --ADD A 1:N RELATIONSHIP BETWEEN TRANSACTION_LOG AND ACTIVITY TYPE
(
 CONSTRAINT FK_ACTIVITY_TYPE FOREIGN KEY(ACTIVITY_TYPE) REFERENCES ACTIVITY_TYPE(ACT_ID)  
);

--PRELOAD SOME DATA INTO THE DATEABASE
INSERT ALL
    INTO PRIVELEDGES VALUES(1,'CUSTOMER')
    INTO PRIVELEDGES VALUES(2,'EMPLOYEE')
    INTO PRIVELEDGES VALUES(3,'ADMIN')
SELECT * FROM DUAL;

COMMIT;

INSERT ALL --CUSTOMERS
    INTO USER_TABLE (FIRSTNAME,LASTNAME,USERNAME,PASSWORD,PRIVELEDGE) VALUES('ELLIOT','CHEN','EJCHEN','PASSWORD',1)
    INTO USER_TABLE (FIRSTNAME,LASTNAME,USERNAME,PASSWORD,PRIVELEDGE) VALUES('JOSH','CHEN','JCHEN','PASSWORD',1)
SELECT * FROM DUAL;

COMMIT;

INSERT ALL --EMPLOYEES AND ADMIN
    INTO USER_TABLE (FIRSTNAME,LASTNAME,USERNAME,PASSWORD,PRIVELEDGE) VALUES('BLAKE','KRUPPA','BLAZING','PASSWORD',2)
    INTO USER_TABLE (FIRSTNAME,LASTNAME,USERNAME,PASSWORD,PRIVELEDGE) VALUES('ROVY','TECH','RTECH','PASSWORD',3)
SELECT * FROM DUAL;

COMMIT;


INSERT ALL
    INTO EMPLOYEE_ACCOUNT VALUES (3,CURRENT_TIMESTAMP)
    INTO EMPLOYEE_ACCOUNT VALUES (4,CURRENT_TIMESTAMP)
SELECT * FROM DUAL;

INSERT ALL
    INTO BANK_ACCOUNT_TYPE VALUES(1,'CHECKING')
    INTO BANK_ACCOUNT_TYPE VALUES(2,'SAVING')
    INTO BANK_ACCOUNT_TYPE VALUES(3,'CREDIT')
SELECT * FROM DUAL;

COMMIT;

INSERT ALL 
    INTO BANK_ACCOUNT (U_ID,LASTLOGIN,BALANCE,BANK_ACCOUNT_TYPE,STATUS) VALUES(1,CURRENT_TIMESTAMP,0.00,1,1)
    INTO BANK_ACCOUNT (U_ID,LASTLOGIN,BALANCE,BANK_ACCOUNT_TYPE,STATUS) VALUES(1,CURRENT_TIMESTAMP,0.00,2,1)
    INTO BANK_ACCOUNT (U_ID,LASTLOGIN,BALANCE,BANK_ACCOUNT_TYPE,STATUS) VALUES(1,CURRENT_TIMESTAMP,0.00,3,1)
    INTO BANK_ACCOUNT (U_ID,LASTLOGIN,BALANCE,BANK_ACCOUNT_TYPE,STATUS) VALUES(2,CURRENT_TIMESTAMP,0.00,1,1)
    INTO BANK_ACCOUNT (U_ID,LASTLOGIN,BALANCE,BANK_ACCOUNT_TYPE,STATUS) VALUES(2,CURRENT_TIMESTAMP,0.00,2,1)
    INTO BANK_ACCOUNT (U_ID,LASTLOGIN,BALANCE,BANK_ACCOUNT_TYPE,STATUS) VALUES(2,CURRENT_TIMESTAMP,0.00,3,1)
SELECT * FROM DUAL;

COMMIT;

INSERT ALL
    INTO ACTIVITY_TYPE VALUES (1,'WITHDRAW')
    INTO ACTIVITY_TYPE VALUES (2,'DEPOSIT')
    INTO ACTIVITY_TYPE VALUES (3,'APPROVE')
    INTO ACTIVITY_TYPE VALUES (4,'DENY')
SELECT * FROM DUAL;

COMMIT;

INSERT ALL
    INTO CUSTOMERS VALUES (3,1)
    INTO CUSTOMERS VALUES (3,2)
SELECT * FROM DUAL;

COMMIT;

ALTER TABLE EMPLOYEE_ACCOUNT
ADD EMAIL VARCHAR2(30);

ALTER TABLE BANK_ACCOUNT
ADD EMAIL VARCHAR2(30);

ALTER TABLE EMPLOYEE_ACCOUNT ADD
CONSTRAINT UNIQUE_EMAIL UNIQUE(EMAIL);

ALTER TABLE BANK_ACCOUNT ADD
CONSTRAINT UNIQUE_EMAIL2 UNIQUE(EMAIL);

INSERT INTO EMPLOYEE_ACCOUNT VALUES (22,CURRENT_TIMESTAMP,NULL);
COMMIT;

--INSERT TRIGGERS FOR TRANSACTION LOGS
CREATE OR REPLACE TRIGGER AFTER_DEPOSIT
AFTER UPDATE OF BALANCE ON BANK_ACCOUNT
FOR EACH ROW
    BEGIN
        INSERT INTO TRANSACTION_LOG VALUES(0,CURRENT_TIMESTAMP,2,:OLD.U_ID,:NEW.BALANCE-:OLD.BALANCE);
    END;
/

CREATE OR REPLACE TRIGGER AFTER_WITHDRAW
AFTER UPDATE OF BALANCE ON BANK_ACCOUNT
FOR EACH ROW
    BEGIN
        INSERT INTO TRANSACTION_LOG VALUES(0,CURRENT_TIMESTAMP,1,:OLD.U_ID,:OLD.BALANCE-:NEW.BALANCE);
    END;
/

CREATE OR REPLACE TRIGGER AFTER_APP_APPROVE
AFTER UPDATE OF STATUS ON BANK_ACCOUNT
FOR EACH ROW
WHEN(NEW.STATUS = 1)
    BEGIN
        INSERT INTO TRANSACTION_LOG VALUES(0,CURRENT_TIMESTAMP,3,:NEW.U_ID,NULL);
    END;
/

--I don't a trigger will work for this case when a user 
CREATE OR REPLACE TRIGGER AFTER_APP_DENIED
AFTER DELETE ON USER_TABLE
FOR EACH ROW
    BEGIN
        INSERT INTO TRANSACTION_LOG VALUES(0,CURRENT_TIMESTAMP,4,:OLD.U_ID,NULL);
    END;
/